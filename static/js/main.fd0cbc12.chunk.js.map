{"version":3,"sources":["board_layout.jsx","constants.jsx","pieces.jsx","square.jsx","board.jsx","game.jsx","serviceWorker.js","index.js"],"names":["BoardLayout","corePieces","topLeftBlack","Array","Error","this","_corePieces","_topLeftBlack","Object","seal","map","row","col","newPiece","undefined","id","nRows","nCols","cp","piece","length","itemTypes","blackPieceNames","whitePieceNames","pieceNames","concat","CorePiece","name","freeze","CorePieceFactory","_lastUsedId","input","make","includes","Piece","corePiece","gameCallbacks","useDrag","item","type","begin","console","log","end","monitor","dragEnd","didDrop","drag","className","ref","SimpleSquare","props","black","children","React","PureComponent","BoardSquare","isBlack","useDrop","accept","drop","movePiece","collect","isOver","style","position","width","height","addHeader","elems","rowName","key","elemName","push","addRow","layout","letter","String","fromCharCode","index","Board","display","gridTemplateColumns","gridTemplateRows","standardLayout","PermanentPieces","makeBoard","corePieceFactory","pieces","Game","cpf","_corePieceFactory","state","boardLayout","bcp","wcp","_OffBoardCorePieces","white","all","_callbacks","pieceId","newBoardLayout","copy","bp","findCorePiecebyId","nbp","find","p","copyPiece","setState","dropped","DndProvider","backend","HTML5Backend","Component","Boolean","window","location","hostname","match","root","document","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fd0cbc12.chunk.js","sourcesContent":["class BoardLayout {\r\n\r\n    // Input is of form show below.  Each element is CorePiece or null.\r\n    // [\r\n    //     [r0c0, r0c1. ...],\r\n    //     [r1c0, r1c1. ...], \r\n    //     ...\r\n    // ]\r\n    constructor(corePieces, topLeftBlack) {\r\n        if(!(corePieces instanceof Array && typeof topLeftBlack === \"boolean\")) {\r\n            throw new Error(\"Bad input to BoardLayout\");\r\n        }\r\n        this._corePieces = corePieces;\r\n        this._topLeftBlack = topLeftBlack;\r\n        Object.seal(this);\r\n    }\r\n\r\n    copy() {\r\n        return new BoardLayout(\r\n            this._corePieces.map(row => [...row]), \r\n            this._topLeftBlack\r\n        );\r\n    }\r\n\r\n    get nRows() {return this._corePieces.length;}\r\n    get nCols() {return this._corePieces[0].length;}\r\n\r\n    // Get or set the core piece at the specified square. Null represents an emoty square.\r\n    corePiece(row, col, newPiece) {\r\n        if(this._corePieces[row][col] === undefined) {\r\n            throw new Error(`Invalid row or column number: ${row} ${col}`)\r\n        }\r\n\r\n        if(newPiece !== undefined) {\r\n            this._corePieces[row][col] = newPiece; \r\n        }\r\n\r\n        return this._corePieces[row][col];\r\n    }\r\n\r\n    isBlack(row, col) {\r\n        const asTopLeft = (row + col) % 2 === 0;\r\n        return asTopLeft ? this._topLeftBlack : !this._topLeftBlack;\r\n    }\r\n\r\n   findCorePiecebyId(id) {\r\n        for(let row = 0; row < this.nRows; ++row) {\r\n            for(let col = 0; col < this.nCols; ++col) {\r\n                const cp = this._corePieces[row][col];\r\n                if(cp && cp.id === id) {\r\n                    return {row:row, col:col, piece:cp};\r\n                }\r\n            }\r\n        }\r\n    \r\n        return null;\r\n    }\r\n}\r\n\r\nexport {BoardLayout};","const itemTypes = {\r\n    PIECE: 'piece'\r\n};\r\n\r\nexport {itemTypes};","import React from 'react';\r\nimport { useDrag } from 'react-dnd';\r\n\r\nimport { itemTypes } from './constants';\r\n\r\n\r\nimport SVGPiece from 'react-chess-pieces';\r\n\r\nconst blackPieceNames = ['p', 'n',  'b',  'r',  'q',  'k'];\r\nconst whitePieceNames = ['P', 'N',  'B',  'R',  'Q',  'K' ];\r\n\r\n\r\nconst pieceNames = blackPieceNames.concat(whitePieceNames);\r\n\r\nclass CorePiece {\r\n  constructor(name, id) {\r\n    this.id = id;\r\n    this.name = name;\r\n    Object.freeze(this);\r\n  }\r\n};\r\n\r\nclass CorePieceFactory {\r\n\r\n  constructor() {\r\n    this._lastUsedId = 0;\r\n  }\r\n\r\n  // Input can be a piece to copy, the name of a piece or null\r\n  make(input = null) {\r\n\r\n    if (input === null) {\r\n      return null;\r\n    }\r\n\r\n    if(input instanceof CorePiece) {\r\n      return this.make(input.name);\r\n    }\r\n\r\n    if (!pieceNames.includes(input)) {\r\n      throw new Error(`CorePieceFactor.make() given unrecognised input: ${input}`)\r\n    }\r\n\r\n    ++this._lastUsedId;\r\n\r\n    return new CorePiece(input, this._lastUsedId);\r\n  }\r\n}\r\n\r\nfunction Piece({ corePiece, gameCallbacks }) {\r\n\r\n  const [, drag] = useDrag({\r\n    item: {\r\n      type: itemTypes.PIECE,\r\n      id: corePiece.id,\r\n    },\r\n    begin: () => console.log(`Drag begin ${corePiece.id}`),\r\n    end: (item, monitor) => gameCallbacks.dragEnd(corePiece.id, monitor.didDrop()),\r\n  });\r\n\r\n\r\n  return (<div\r\n    className=\"piece\"\r\n    ref={drag}\r\n  >\r\n    <SVGPiece piece={corePiece.name} />\r\n  </div>);  \r\n}\r\n\r\nexport { Piece, CorePieceFactory, blackPieceNames, whitePieceNames }","import React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport { itemTypes } from './constants';\r\nimport { Piece } from './pieces';\r\n\r\nclass SimpleSquare extends React.PureComponent {\r\n    render() {\r\n        let { black, children } = this.props;\r\n\r\n        const className = 'square ' + (black ? 'black-square' : 'white-square');\r\n        return (\r\n            <div className={className}>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction BoardSquare({ corePiece, gameCallbacks, isBlack, row, col }) {\r\n    const [, drop] = useDrop({\r\n        accept: itemTypes.PIECE,\r\n        drop: item => gameCallbacks.movePiece(item.id, row, col),\r\n        collect: monitor => ({\r\n            isOver: !!monitor.isOver(),\r\n        }),\r\n    })\r\n    return (\r\n        <div ref={drop}\r\n            style={{\r\n                position: 'relative',\r\n                width: '100%',\r\n                height: '100%',\r\n            }}\r\n        >\r\n            <SimpleSquare black={isBlack}>\r\n                {corePiece ? <Piece corePiece={corePiece} gameCallbacks={gameCallbacks} /> : null}\r\n            </SimpleSquare>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default BoardSquare;","import React from 'react';\r\nimport BoardSquare  from './square';\r\n\r\nfunction addHeader(nCols, elems, rowName) {\r\n    const key = elemName => rowName + '-' + elemName;\r\n    elems.push(<div key={key('start')} />);\r\n    for (let col = 1; col <= nCols; ++col) {\r\n        elems.push(\r\n            <div\r\n                key={key(col)}\r\n                className='column-number'\r\n            >\r\n                {col}\r\n            </div>\r\n        );\r\n    }\r\n    elems.push(<div key={key('end')} />);\r\n}\r\n\r\nfunction addRow(layout, row, gameCallbacks, elems) {\r\n\r\n    const key = elemName =>  'r' + row + '-' + elemName;\r\n    \r\n    const letter = String.fromCharCode(65+row);\r\n\r\n    elems.push(\r\n        <div\r\n            key={key('start')}\r\n            className='row-letter'\r\n        >\r\n            {letter}\r\n        </div>\r\n    );\r\n    \r\n    for (let col = 0; col < layout.nCols; ++col) {\r\n        elems.push(\r\n            <BoardSquare\r\n                index={col}\r\n                key={key(col)}\r\n\r\n                corePiece={layout.corePiece(row, col)}\r\n                gameCallbacks={gameCallbacks}\r\n                isBlack={layout.isBlack(row, col)}\r\n\r\n                row={row}\r\n                col={col}\r\n            />\r\n        );\r\n    }\r\n\r\n    elems.push(\r\n        <div\r\n            key={key('end')}\r\n            className='row-letter'\r\n        >\r\n            {letter}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Board({layout, gameCallbacks}) {\r\n    const nRows = layout.nRows;\r\n    const nCols = layout.nCols;\r\n\r\n    let elems = [];\r\n\r\n    addHeader(nCols, elems, 'top');\r\n    for (let row = 0; row < nRows; ++row) {\r\n        addRow(layout, row, gameCallbacks, elems);\r\n    }\r\n    addHeader(nCols, elems, 'bottom');\r\n\r\n    const style = { // For now\r\n        display: 'grid',\r\n        gridTemplateColumns: `repeat(${nCols+2},auto)`,\r\n        gridTemplateRows: `repeat(${nRows+2},auto)`,\r\n    };\r\n\r\n    return (\r\n        <div className=\"board\" style={style}>\r\n            {elems}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport { Board }\r\n","// Information about games that is indepantant of rendering */\r\n\r\nimport React from 'react';\r\nimport { BoardLayout } from './board_layout';\r\nimport { Board } from './board';\r\nimport { blackPieceNames, whitePieceNames, Piece } from './pieces';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\n\r\nimport { CorePieceFactory } from \"./pieces\";\r\n\r\n\r\nlet standardLayout = [\r\n    [ 'r',  'n',  'b',  'q',  'k',  'b',  'n',  'r'],\r\n    [ 'p',  'p',  'p',  'p',  'p',  'p',  'p',  'p'],\r\n    [null, null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null, null],\r\n    [ 'P',  'P',  'P',  'P',  'P',  'P',  'P',  'P'],\r\n    [ 'R',  'N',  'B',  'Q',  'K',  'B',  'N',  'R'],\r\n];\r\nstandardLayout.topLeftBlack=false;\r\nObject.freeze(standardLayout);\r\n\r\nfunction PermanentPieces({ corePieces, gameCallbacks }) {\r\n    return (\r\n        <div className='permanent-pieces'>\r\n            {corePieces.map(\r\n                (cp, index) => (\r\n                    <div className='square' index={index} key={index}>\r\n                        <Piece corePiece={cp} gameCallbacks={gameCallbacks} />\r\n\r\n                    </div>\r\n                )\r\n            )}   \r\n        </div>\r\n    ); \r\n}\r\n\r\nfunction makeBoard(layout, corePieceFactory) {\r\n\r\n    const pieces = layout.map(row => row.map(\r\n        name => corePieceFactory.make(name)\r\n    ));\r\n\r\n    return new BoardLayout(pieces, layout.topLeftBlack)\r\n}\r\n\r\n\r\nclass Game extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        let cpf = new CorePieceFactory();\r\n        this._corePieceFactory = cpf;\r\n\r\n        this.state = {\r\n            boardLayout: makeBoard(standardLayout, cpf),\r\n        }\r\n\r\n        const bcp = blackPieceNames.map(name => cpf.make(name));\r\n        const wcp = whitePieceNames.map(name => cpf.make(name));\r\n\r\n           \r\n        this._OffBoardCorePieces = {\r\n            black: bcp,\r\n            white: wcp,\r\n            all: bcp.concat(wcp),\r\n        };\r\n\r\n        this._callbacks = {\r\n            movePiece: (...args) => this.movePiece(...args),\r\n            dragEnd: (...args) => this.dragEnd(...args),\r\n        };\r\n\r\n        Object.freeze(this._OffBoardCorePieces);\r\n    }\r\n\r\n    copyPiece(piece) {\r\n        return this._corePieceFactory.make(piece); \r\n    }\r\n\r\n    movePiece(pieceId, row, col)  {\r\n\r\n        let newBoardLayout = this.state.boardLayout.copy();\r\n        const bp = newBoardLayout.findCorePiecebyId(pieceId);\r\n        if ( bp ) {\r\n            if (row !== bp.row || col !== bp.col) {\r\n                newBoardLayout.corePiece(row, col, bp.piece);\r\n                newBoardLayout.corePiece(bp.row, bp.col, null);\r\n            }\r\n        } else {\r\n            const nbp = this._OffBoardCorePieces.all.find(p => p.id === pieceId);\r\n            if (!nbp) {\r\n                throw new Error(`Piece with id ${pieceId} not found`);\r\n            }\r\n            newBoardLayout.corePiece(row,col, this.copyPiece(nbp))\r\n        }\r\n\r\n        this.setState({\r\n            boardLayout: newBoardLayout,\r\n        })\r\n    }\r\n\r\n    dragEnd(pieceId, dropped) {\r\n        if (!dropped) {\r\n            // The piece was dragged off the board. Now clear it.\r\n            const bp = this.state.boardLayout.findCorePiecebyId(pieceId);\r\n            if (bp) {\r\n                let newBoardLayout = this.state.boardLayout.copy();\r\n                newBoardLayout.corePiece(bp.row, bp.col, null);\r\n                \r\n                this.setState({\r\n                    boardLayout: newBoardLayout,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <DndProvider backend={HTML5Backend}>\r\n                <div className=\"game\">\r\n\r\n                    <PermanentPieces \r\n                        corePieces={this._OffBoardCorePieces.black}\r\n                        gameCallbacks={this._callbacks}     \r\n                    />\r\n\r\n                    <Board\r\n                        layout={this.state.boardLayout}\r\n                        gameCallbacks={this._callbacks}\r\n                    />\r\n\r\n                    <PermanentPieces \r\n                        corePieces={this._OffBoardCorePieces.white}\r\n                        gameCallbacks={this._callbacks}     \r\n                    />\r\n\r\n                </div>\r\n            </DndProvider>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport { Game }\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Game } from './game';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './main.css';\r\n\r\nconst root = document.getElementById('root');\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Game />\r\n  </React.StrictMode>,\r\n  root\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}