{"version":3,"sources":["chess/constants.ts","chess/piece.tsx","chess/square.tsx","chess/board.tsx","chess/row-of-pieces.tsx","chess/starting-layouts.ts","chess/game-control.tsx","chess/board-layout.ts","tools/state-manager.ts","chess/core-piece.ts","chess/board-control.tsx","chess/display-options.tsx","chess/game.tsx","serviceWorker.js","index.tsx"],"names":["itemTypes","Piece","corePiece","boardControl","useDrag","item","type","id","collect","monitor","isDragging","end","dragEnd","didDrop","drag","dragBehaviour","move","className","ref","piece","name","SimpleSquare","color","this","props","children","Error","React","PureComponent","DroppableSquare","options","row","col","useDrop","accept","drop","movePiece","isOver","style","position","width","height","addHeader","nCols","elems","rowName","key","elemName","push","String","fromCharCode","addRow","layout","makeBoarderElem","nRows","makeSquare","isBlack","Board","displayOptions","boardLayout","reverseBoardRows","display","gridTemplateColumns","gridTemplateRows","RowOfPieces","corePieces","map","cp","index","layouts","standard","copyableTop","board","topLeftBlack","copyableBottom","displayName","fiveASide","test","layoutNames","Object","keys","GameControl","currentLayout","boardLayoutName","onChange","setBoardLayout","checked","htmlFor","replace","onClick","clear","flipRowOrder","disabled","canUndo","undo","canRedo","redo","restart","BoardLayout","_corePieces","_topLeftBlack","Array","seal","undefined","newPiece","sanityCheckRowCol","fill","otherRow","tmp","length","StateManager","initialState","_states","_stateIndex","state","changeState","slice","CorePiece","freeze","CorePieceFactory","_lastUsedId","make","makeBoardState","cpf","makeCorePiece","makeCorePieceOrNull","startingLayouts","pieces","copyablePiecesTop","copyablePiecesBottom","layoutName","BoardControl","manager","setGameState","corePieceFactory","stateManager","newState","setState","doSetGameState","copy","clearSquares","pieceId","newBoardLayout","bp","findCorePiecebyId","setCorePiece","obp","find","p","findOffBoardPiece","copiedPiece","dropped","onBoard","Boolean","DisplayOptions","setReverseBoardRows","Game","useRef","current","useState","gameState","useBoardControl","copyablePieces","which","top","DndProvider","backend","HTML5Backend","window","location","hostname","match","root","document","getElementById","App","useEffect","title","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a1a1c4a3.chunk.js","sourcesContent":["const itemTypes = {\r\n    PIECE: 'piece'\r\n};\r\n\r\nexport {itemTypes};","import React from 'react';\r\nimport { useDrag } from 'react-dnd';\r\nimport { itemTypes } from './constants';\r\nimport { CorePiece } from './core-piece';\r\nimport { BoardControl } from './board-control';\r\n\r\nimport SVGPiece from 'react-chess-pieces';\r\n\r\n\r\ninterface PieceProps {\r\n  boardControl: BoardControl;\r\n  corePiece: CorePiece;\r\n}\r\n\r\nconst Piece : React.FC<PieceProps> = ({ corePiece, boardControl }) => {\r\n\r\n  const [{ isDragging }, drag ] = useDrag({\r\n    item: {\r\n      type: itemTypes.PIECE,\r\n      id: corePiece.id,\r\n    },\r\n    collect: monitor => ({\r\n      isDragging: !!monitor.isDragging(),\r\n    }),\r\n    end: (item, monitor) => boardControl.dragEnd(corePiece.id, monitor.didDrop()),\r\n  });\r\n\r\n  if (isDragging && boardControl.dragBehaviour(corePiece.id).move) {\r\n    /* Hide the original piece when moving */\r\n    return null;\r\n  }\r\n  else {\r\n    return (\r\n      <div\r\n        className='piece-div'\r\n        ref={drag}\r\n      >\r\n        <SVGPiece piece={corePiece.name} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { Piece } ","import React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport { itemTypes } from './constants';\r\nimport { Piece } from './piece';\r\nimport { CorePiece } from './core-piece';\r\nimport { BoardControl } from './board-control';\r\n\r\ninterface Props {\r\n    color?: 'black' | 'white';\r\n}\r\n\r\nclass SimpleSquare extends React.PureComponent<Props> {\r\n    render() {\r\n        const color = this.props.color;\r\n        const children = this.props.children;\r\n\r\n        let className = 'square';\r\n        if (color) {\r\n            if(color === 'black') {\r\n                className += ' black-square';\r\n            } else if(color === 'white') {\r\n                className += ' white-square';\r\n            } else {\r\n                throw new Error(`Unrecognised square color: ${color}`)\r\n            }\r\n        }\r\n        \r\n        return (\r\n            <div className='square-placeholder'>\r\n                <div className={className}>\r\n                    {children}\r\n                </div>\r\n           </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction DroppableSquare(options:\r\n    {\r\n        corePiece: CorePiece | null,\r\n        boardControl: BoardControl, \r\n        color: 'black' | 'white',\r\n        row: number,\r\n        col: number,\r\n    }) {\r\n\r\n    const { corePiece, boardControl, color, row, col} = options;\r\n\r\n    const [, drop] = useDrop({\r\n        accept: itemTypes.PIECE,\r\n \r\n        // The use of 'any' below is a kludge.  I am not sure how to type if properly, or\r\n        // even if proper typing is possible.\r\n        drop: (corePiece: any) => boardControl.movePiece(corePiece.id, row, col),\r\n        collect: monitor => ({\r\n            isOver: !!monitor.isOver(),\r\n        }),\r\n    })\r\n    return (\r\n        <div ref={drop}\r\n            style={{\r\n                position: 'relative',\r\n                width: '100%',\r\n                height: '100%',\r\n            }}\r\n        >\r\n            <SimpleSquare color={color}>\r\n                {corePiece ? <Piece corePiece={corePiece} boardControl={boardControl} /> : null}\r\n            </SimpleSquare>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport {SimpleSquare, DroppableSquare};","import React, { ReactElement } from 'react';\r\nimport { DroppableSquare as BoardSquare } from './square';\r\nimport { BoardLayout } from './board-layout';\r\nimport { BoardControl } from './board-control';\r\nimport { DisplayOptions } from './display-options';\r\n\r\ntype Elems = Array<ReactElement>;\r\n\r\n\r\nfunction addHeader(nCols: number, elems: Elems, rowName: string) {\r\n    const key = (elemName: string | number) => rowName + '-' + elemName;\r\n    elems.push(<div key={key('start')} />);\r\n    for (let col = 0; col < nCols; ++col) {\r\n        elems.push(\r\n            <div\r\n                key={key(col)}\r\n                className='board-boarder board-boarder-letter'\r\n            >\r\n                {String.fromCharCode(65+col)}\r\n            </div>\r\n        );\r\n    }\r\n    elems.push(<div key={key('end')} />);\r\n}\r\n\r\nfunction addRow(layout: BoardLayout, row: number, boardControl: BoardControl, elems: Elems) {\r\n\r\n    let key = (name: string | number) =>  'r' + row + '-' + name;\r\n\r\n    let makeBoarderElem = (name: string) => (\r\n        <div\r\n            key={key(name)}\r\n            className='board-boarder board-boarder-number'\r\n        >\r\n            {layout.nRows - row}\r\n        </div>\r\n    );\r\n\r\n    let makeSquare = (col: number) => (\r\n        <BoardSquare\r\n            key={key(col)}\r\n\r\n            corePiece={layout.corePiece(row, col)}\r\n            boardControl={boardControl}\r\n\r\n            // This is the 'conceptual' color which must be black or white.\r\n            color={layout.isBlack(row, col) ? 'black' : 'white'}\r\n\r\n            row={row}\r\n            col={col}\r\n        />\r\n    )\r\n\r\n    elems.push(makeBoarderElem('start'));\r\n\r\n    for (let col = 0; col < layout.nCols; ++col) {\r\n        elems.push(makeSquare(col));\r\n    }\r\n\r\n    elems.push(makeBoarderElem('end'));\r\n}\r\n\r\n\r\nfunction Board({ boardControl, displayOptions }: {\r\n    boardControl: BoardControl,\r\n    displayOptions: DisplayOptions,\r\n    })\r\n    {\r\n    const layout = boardControl.boardLayout;\r\n    const nRows = layout.nRows;\r\n    const nCols = layout.nCols;\r\n\r\n    let elems: Elems = [];\r\n\r\n    addHeader(nCols, elems, 'top');\r\n    for (let row = 0; row < nRows; ++row) {\r\n        const rowToAdd = displayOptions.reverseBoardRows ? nRows - 1 - row : row;\r\n        addRow(layout, rowToAdd, boardControl, elems);\r\n    }\r\n    addHeader(nCols, elems, 'bottom');\r\n\r\n    const style = { // For now\r\n        display: 'grid',\r\n        gridTemplateColumns: `repeat(${nCols+2},auto)`,\r\n        gridTemplateRows: `repeat(${nRows+2},auto)`,\r\n    };\r\n\r\n    return (\r\n        <div className=\"board\" style={style}>\r\n            {elems}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport { Board }\r\n","import React from 'react';\r\n\r\nimport { SimpleSquare } from './square'\r\nimport { CorePiece } from './core-piece';\r\nimport { Piece } from './piece';\r\nimport { BoardControl }  from './board-control';\r\n\r\nfunction RowOfPieces({ corePieces, boardControl }: {\r\n    corePieces: Array<CorePiece>,\r\n    boardControl: BoardControl,\r\n}) {\r\n    return (\r\n        <div className='row-of-pieces'>\r\n            {corePieces.map(\r\n                (cp, index) => (\r\n                    <SimpleSquare key={index}>\r\n                        { <Piece corePiece={cp} boardControl={boardControl} /> }\r\n                    </SimpleSquare>\r\n                )\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { RowOfPieces }","const layouts = {\r\n    standard: {\r\n        copyableTop: ['p', 'n',  'b',  'r',  'q',  'k'],\r\n\r\n        board: [\r\n            ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],\r\n            ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\r\n            ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],\r\n        ],\r\n        topLeftBlack: false,\r\n\r\n        copyableBottom: ['P', 'N',  'B',  'R',  'Q',  'K' ],\r\n\r\n        displayName: 'Standard',\r\n    },\r\n\r\n    fiveASide: {\r\n        copyableTop: ['p', 'n',  'b',  'r',  'q',  'k'],\r\n\r\n        board: [\r\n            ['r', 'n', 'b', 'q', 'k'],\r\n            ['p', 'p', 'p', 'p', 'p'],\r\n            [null, null, null, null, null],\r\n            [null, null, null, null, null],\r\n            ['P', 'P', 'P', 'P', 'P'],\r\n            ['R', 'N', 'B', 'Q', 'K'],\r\n        ],\r\n        topLeftBlack: false,\r\n\r\n        copyableBottom: ['P', 'N',  'B',  'R',  'Q',  'K' ],\r\n\r\n        displayName: '5-a-side',\r\n    },\r\n\r\n    test: {\r\n        copyableTop: ['p'],\r\n\r\n        board: [\r\n            ['p'],\r\n            [null],\r\n            ['P'],\r\n        ],\r\n        topLeftBlack: false,\r\n\r\n        copyableBottom: ['P'],\r\n\r\n        displayName: 'test',\r\n    },\r\n};\r\n\r\nconst defaultLayoutName = 'standard';\r\n\r\nexport default layouts;\r\nexport {defaultLayoutName};\r\n","import React from 'react';\r\nimport layouts from './starting-layouts';\r\nimport { BoardControl } from './board-control';\r\nimport { DisplayOptions } from './display-options';\r\n\r\ntype LayoutKey = keyof typeof layouts;\r\nconst layoutNames = Object.keys(layouts) as Array<LayoutKey>; // Kludge?\r\n\r\nfunction displayName(layoutName: LayoutKey) {\r\n    // replace '-' with non-breaking space\r\n    return layouts[layoutName].displayName.replace(\"o\", \"&#8209;\");\r\n}\r\n\r\ninterface GameControlProps {\r\n    boardControl: BoardControl,\r\n    displayOptions: DisplayOptions,\r\n};\r\n\r\nconst GameControl : React.FC<GameControlProps>  = ({boardControl, displayOptions}) => {\r\n    const currentLayout = boardControl.boardLayoutName;\r\n\r\n    const makeGameTypeItem = (name: LayoutKey) => (\r\n        <div key={name}>\r\n            <input type=\"radio\" name=\"game-type\" id={name}\r\n                onChange={() => boardControl.setBoardLayout(name)}\r\n                checked={currentLayout === name}\r\n            />\r\n\r\n            <label htmlFor={name}>{displayName(name)}</label>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"game-control\" >\r\n            <div className=\"game-type\">\r\n                {layoutNames.map(makeGameTypeItem)}\r\n            </div>\r\n\r\n            <div className='buttons'>\r\n                <button type='button' onClick={()=>boardControl.clear()}> Clear</button>\r\n                <button type='button' onClick={()=>displayOptions.flipRowOrder()}>Flip</button>\r\n            </div>\r\n\r\n            <div className='buttons'>\r\n                <button type='button'\r\n                    disabled={!boardControl.canUndo}\r\n                    onClick={() => boardControl.undo()}>\r\n                    Undo\r\n                </button>\r\n\r\n                <button type='button'\r\n                    disabled={!boardControl.canRedo}\r\n                    onClick={() => boardControl.redo()}>\r\n                    Redo\r\n                </button>\r\n\r\n                <button type='button'\r\n                    disabled={!boardControl.canUndo} //Kludge? \r\n                    onClick={()=>boardControl.restart()}>\r\n                    Restart\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default GameControl;\r\n","import {CorePiece} from \"./core-piece\";\r\ntype CorePieceArray = Array<Array<CorePiece|null>>;\r\n\r\nclass BoardLayout {\r\n\r\n    private _corePieces : CorePieceArray;\r\n    private _topLeftBlack : boolean;\r\n    // Input is of form show below.  Each element is CorePiece or null.\r\n    // [\r\n    //     [r0c0, r0c1. ...],\r\n    //     [r1c0, r1c1. ...], \r\n    //     ...\r\n    // ]\r\n    constructor(corePieces: CorePieceArray, topLeftBlack: boolean) {\r\n        if(!(corePieces instanceof Array && typeof topLeftBlack === \"boolean\")) {\r\n            throw new Error(\"Bad input to BoardLayout\");\r\n        }\r\n        this._corePieces = corePieces;\r\n        this._topLeftBlack = topLeftBlack;\r\n        Object.seal(this);\r\n    }\r\n\r\n    copy() {\r\n        return new BoardLayout(\r\n            this._corePieces.map(row => [...row]), \r\n            this._topLeftBlack\r\n        );\r\n    }\r\n\r\n    get nRows() {return this._corePieces.length;}\r\n    get nCols() {return this._corePieces[0].length;}\r\n\r\n    private sanityCheckRowCol(row :number, col: number) {\r\n        if(this._corePieces[row][col] === undefined) {\r\n            throw new Error(`Invalid row or column number: ${row} ${col}`)\r\n        }\r\n    }\r\n\r\n    // Null represents an emoty square.\r\n    setCorePiece(row :number, col: number, newPiece: CorePiece | null ) {\r\n        this.sanityCheckRowCol(row,col);\r\n\r\n        this._corePieces[row][col] = newPiece; \r\n    }\r\n\r\n    corePiece(row: number, col: number) {\r\n        this.sanityCheckRowCol(row, col);\r\n\r\n        return this._corePieces[row][col];\r\n    }\r\n\r\n    isBlack(row: number, col: number) {\r\n        const asTopLeft = (row + col) % 2 === 0;\r\n        return asTopLeft ? this._topLeftBlack : !this._topLeftBlack;\r\n    }\r\n\r\n   findCorePiecebyId(id: number) {\r\n        for(let row = 0; row < this.nRows; ++row) {\r\n            for(let col = 0; col < this.nCols; ++col) {\r\n                const cp = this._corePieces[row][col];\r\n                if(cp && cp.id === id) {\r\n                    return {row:row, col:col, piece:cp};\r\n                }\r\n            }\r\n        }\r\n    \r\n        return null;\r\n    }\r\n\r\n    clearSquares() {\r\n        for(let row of this._corePieces) {\r\n            row.fill(null);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    reserveRows() {\r\n        this._topLeftBlack = this.isBlack(this.nRows-1, 0);\r\n\r\n        let cp = this._corePieces; \r\n        for(let row = 0; row < this.nRows/2; ++row) {\r\n            const otherRow = this.nRows - (row+1);\r\n            for(let col = 0; col < this.nCols; ++col) {\r\n                const tmp = cp[row][col];\r\n                cp[row][col] = cp[otherRow][col];\r\n                cp[otherRow][col] = tmp;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport {BoardLayout};","class StateManager<State> {\r\n    private _states: Array<State>;\r\n    private _stateIndex: number;\r\n\r\n    constructor(initialState: State) {\r\n        this._states = [initialState];\r\n        this._stateIndex = 0;\r\n    }\r\n\r\n    get canUndo() : boolean {return this._stateIndex > 0;}\r\n    get canRedo() : boolean {return this._stateIndex + 1 < this._states.length;}\r\n\r\n    get state() :State {return this._states[this._stateIndex];}\r\n\r\n    undo(): State {\r\n        if(!this.canUndo) {\r\n            throw new Error(\"StateManager Cannot undo\")\r\n        }\r\n        --this._stateIndex;\r\n        return this.state;\r\n    }\r\n\r\n    redo() : State {\r\n        if(!this.canRedo) {\r\n            throw new Error(\"StateManager Cannot redo\")\r\n        }\r\n        ++this._stateIndex;\r\n        return this.state;\r\n    }\r\n\r\n    restart() : State {\r\n        this._stateIndex = 0;\r\n        return this.state;\r\n    }\r\n\r\n    setState(changeState: Partial<State>) : void {\r\n        // Remove states afters the current state\r\n        this._states = this._states.slice(0, this._stateIndex+1);\r\n\r\n        // Add a new complete state\r\n        this._states.push({...this.state, ...changeState});\r\n        ++this._stateIndex;\r\n    }\r\n}\r\n\r\nexport { StateManager };","type CorePieceName = string; // Could do better\r\ntype CorePieceId = number;\r\n\r\nclass CorePiece {\r\n    name: CorePieceName;\r\n    id: CorePieceId;\r\n\r\n    constructor(name: CorePieceName, id: CorePieceId) {\r\n      this.id = id;\r\n      this.name = name;\r\n      Object.freeze(this);\r\n    }\r\n  }\r\n  \r\n  class CorePieceFactory {\r\n    private _lastUsedId: number;\r\n    \r\n    constructor() {\r\n      this._lastUsedId = 0;\r\n    }\r\n  \r\n\r\n    make(name: CorePieceName) {\r\n      ++this._lastUsedId;\r\n      return new CorePiece(name, this._lastUsedId);\r\n    }\r\n\r\n    copy(corePiece: CorePiece) {\r\n      return this.make(corePiece.name);\r\n    }\r\n  }\r\n\r\n  export { CorePiece, CorePieceFactory }\r\n  export type { CorePieceId, CorePieceName }","import { useState, useRef } from 'react';\r\nimport { BoardLayout } from './board-layout';\r\n\r\nimport { defaultLayoutName } from './starting-layouts';\r\nimport { StateManager } from '../tools';\r\nimport {  CorePieceFactory, CorePieceId } from './core-piece';\r\nimport startingLayouts from './starting-layouts';\r\n\r\ntype BoardLayoutName = keyof typeof startingLayouts;\r\n\r\nfunction makeBoardState(name: BoardLayoutName, cpf: CorePieceFactory) {\r\n\r\n    const makeCorePiece = (name: string) => cpf.make(name);\r\n    const makeCorePieceOrNull = (name: string | null) => (name ? cpf.make(name) : null);\r\n\r\n    const layout = startingLayouts[name];\r\n    if (!layout) {\r\n        throw new Error(`Unrecognised layout name: ${name}`)\r\n    }\r\n\r\n    const pieces = layout.board.map((row: Array<string | null>) => row.map(makeCorePieceOrNull));\r\n\r\n    return {\r\n        copyablePiecesTop: layout.copyableTop.map(makeCorePiece),\r\n        boardLayout: new BoardLayout(pieces, layout.topLeftBlack),\r\n        copyablePiecesBottom: layout.copyableBottom.map(makeCorePiece),\r\n        layoutName: name,\r\n    };\r\n}\r\n\r\ntype GameState = ReturnType<typeof makeBoardState>;\r\n\r\nclass BoardControl {\r\n\r\n    private stateManager: StateManager<GameState>;\r\n    private setGameState: (arg: GameState) => void;\r\n    private corePieceFactory: CorePieceFactory;\r\n\r\n    constructor(\r\n        manager: StateManager<GameState>,\r\n        setGameState: (arg: GameState) => void,\r\n        corePieceFactory: CorePieceFactory,\r\n        ) {\r\n        this.stateManager = manager;\r\n        this.setGameState = setGameState;\r\n        this.corePieceFactory = corePieceFactory;\r\n        }\r\n\r\n\r\n    doSetGameState(newState: Partial<GameState>) {\r\n\r\n        // if(!equivalentState(gameState,  this.stateManager.gameState)) {\r\n        //     console.log(\"gameState\", gameState, \"tateManager.gameState\",  this.stateManager.gameState);\r\n        //     throw new Error(\"StateManager out of sync with client\");\r\n        // }\r\n\r\n        this.stateManager.setState(newState);\r\n        this.setGameState(this.stateManager.state);\r\n    }\r\n\r\n    get canUndo()  {return this.stateManager.canUndo;}\r\n    get canRedo()  {return this.stateManager.canRedo;}\r\n\r\n    undo() { this.setGameState( this.stateManager.undo());}\r\n    redo () { this.setGameState( this.stateManager.redo());}\r\n    restart () { this.setGameState( this.stateManager.restart());}\r\n\r\n    setBoardLayout (layoutName: BoardLayoutName) {\r\n        this.doSetGameState(makeBoardState(layoutName, this.corePieceFactory));\r\n    }\r\n\r\n    get copyablePiecesTop() {return this.stateManager.state.copyablePiecesTop;}\r\n    get copyablePiecesBottom() {return this.stateManager.state.copyablePiecesBottom;}\r\n\r\n\r\n    get boardLayout() {return this.stateManager.state.boardLayout;}\r\n    get boardLayoutName() {return this.stateManager.state.layoutName;}\r\n\r\n    clear () {\r\n        this.doSetGameState({\r\n            boardLayout: this.stateManager.state.boardLayout.copy().clearSquares()\r\n        });\r\n    };\r\n\r\n    movePiece (pieceId: CorePieceId, row: number, col: number) {\r\n\r\n        const findOffBoardPiece = (pieceId: CorePieceId) => {\r\n            // Kludge: p should never be null\r\n            let piece = this.stateManager.state.copyablePiecesTop.find(p => p && p.id === pieceId);\r\n            if (!piece) {\r\n                piece = this.stateManager.state.copyablePiecesBottom.find(p => p && p.id === pieceId);\r\n            }\r\n    \r\n            return piece;\r\n        }\r\n\r\n        let newBoardLayout = this.stateManager.state.boardLayout.copy();\r\n\r\n        const bp = newBoardLayout.findCorePiecebyId(pieceId);\r\n        if (bp) {\r\n            if (row !== bp.row || col !== bp.col) {\r\n                newBoardLayout.setCorePiece(row, col, bp.piece);\r\n                newBoardLayout.setCorePiece(bp.row, bp.col, null);\r\n                this.doSetGameState({ boardLayout: newBoardLayout, });\r\n            }\r\n        } else {\r\n            let obp = findOffBoardPiece(pieceId);\r\n\r\n            if (!obp) {\r\n                throw new Error(`Piece with id ${pieceId} not found`);\r\n            }\r\n\r\n            const copiedPiece = this.corePieceFactory.copy(obp);\r\n            newBoardLayout.setCorePiece(row, col, copiedPiece);\r\n            this.doSetGameState({ boardLayout: newBoardLayout, });\r\n        }\r\n    };\r\n\r\n    dragEnd (pieceId: CorePieceId, dropped: boolean) {\r\n        if (!dropped) {\r\n            // The piece was dragged off the board. Now clear it.\r\n            const bp = this.stateManager.state.boardLayout.findCorePiecebyId(pieceId);\r\n            if (bp) {\r\n                let newBoardLayout = this.stateManager.state.boardLayout.copy();\r\n                newBoardLayout.setCorePiece(bp.row, bp.col, null);\r\n\r\n                this.doSetGameState({\r\n                    boardLayout: newBoardLayout,\r\n                })\r\n            }\r\n        }\r\n    };\r\n\r\n    dragBehaviour (pieceId: CorePieceId) {\r\n        const onBoard = Boolean(this.stateManager.state.boardLayout.findCorePiecebyId(pieceId));\r\n\r\n        return {\r\n            move: onBoard,\r\n            copy: !onBoard,\r\n        };\r\n    }\r\n}\r\n\r\nfunction useBoardControl() {\r\n    let corePieceFactory = useRef(new CorePieceFactory()).current;\r\n    const [gameState, setGameState] = useState(makeBoardState(defaultLayoutName, corePieceFactory));\r\n    let stateManager = useRef(new StateManager(gameState)).current;\r\n    return new BoardControl(stateManager, setGameState, corePieceFactory); \r\n}\r\n\r\nexport { BoardControl, useBoardControl }","import { useState } from 'react';\r\n\r\nclass DisplayOptions {\r\n    readonly reverseBoardRows: boolean;\r\n    private setReverseBoardRows: (arg0: boolean) => void;\r\n    \r\n    constructor(reverseBoardRows: boolean, \r\n        setReverseBoardRows: (arg0: boolean) => void\r\n        ) {\r\n        this.reverseBoardRows = reverseBoardRows;\r\n        this.setReverseBoardRows = setReverseBoardRows;\r\n    }\r\n\r\n    flipRowOrder() { this.setReverseBoardRows(!this.reverseBoardRows);}\r\n}\r\n\r\nfunction useDisplayOptions()\r\n{\r\n    return new DisplayOptions(...useState(false));\r\n}\r\n\r\nexport { DisplayOptions, useDisplayOptions}","import React from 'react';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\n\r\nimport { Board } from './board';\r\nimport { RowOfPieces } from './row-of-pieces';\r\nimport GameControl from './game-control';\r\n\r\nimport { useBoardControl } from './board-control'\r\nimport { useDisplayOptions } from './display-options';\r\n\r\nimport './chess.css';\r\n\r\nconst Game : React.FC = () => {\r\n    \r\n    const boardControl = useBoardControl(); \r\n    const displayOptions = useDisplayOptions();\r\n\r\n    let copyablePieces = (which : 'top' | 'bottom') => {\r\n        let top = which === 'top';\r\n        if(displayOptions.reverseBoardRows) {\r\n            top = !top;\r\n        }\r\n\r\n        return top ? boardControl.copyablePiecesTop : boardControl.copyablePiecesBottom;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <DndProvider backend={HTML5Backend}>\r\n                <div className=\"game\">\r\n\r\n                    <RowOfPieces\r\n                        corePieces={copyablePieces('top')}\r\n                        boardControl={boardControl}\r\n                    />\r\n\r\n                    <Board\r\n                        boardControl={boardControl}\r\n                        displayOptions={displayOptions}\r\n                    />\r\n\r\n                    <RowOfPieces\r\n                        corePieces={copyablePieces('bottom')}\r\n                        boardControl={boardControl}\r\n                    />\r\n                </div>\r\n            </DndProvider>\r\n            <GameControl boardControl={boardControl} displayOptions={displayOptions} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport { Game }","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Chess from './chess';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst root = document.getElementById('root');\r\n\r\nfunction App() {\r\n  useEffect(() => {document.title = 'Chess'}, []);\r\n  return <Chess />\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  root\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}