{"version":3,"sources":["pieces.jsx","board.jsx","App.js","serviceWorker.js","game.jsx","index.js"],"names":["Knight","Square","black","children","className","renderSquare","row","col","knightPosition","isKnight","Board","props","nRows","nCols","squares","push","style","display","width","App","Boolean","window","location","hostname","match","count","receive","root","document","getElementById","ReactDOM","render","StrictMode","setInterval","pos","Math","floor","console","log","getPos","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wPAEA,SAASA,IACP,OAAO,wCCDT,SAASC,EAAT,GAAqC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACdC,EAAY,UAAYF,EAAQ,eAAiB,IACvD,OACI,yBAAKE,UAAWA,GACXD,GAKb,SAASE,EAAaC,EAAKC,EAAKC,GAE5B,IAAMN,GAASI,EAAIC,GAAO,IAAM,EAC1BE,EAAYH,IAAQE,EAAe,IAASD,IAAQC,EAAe,GACzE,OACI,kBAACP,EAAD,CAAQC,MAAOA,GACVO,EAAU,kBAACT,EAAD,MAAa,MAIpC,SAASU,EAAMC,GAIX,IAJmB,IACZC,EAAgCD,EAAhCC,MAAOC,EAAyBF,EAAzBE,MAAOL,EAAkBG,EAAlBH,eAEjBM,EAAU,GACNR,EAAM,EAAGA,EAAMM,IAASN,EAC5B,IAAI,IAAIC,EAAM,EAAGA,EAAMM,IAASN,EAC5BO,EAAQC,KAAKV,EAAaC,EAAKC,EAAKC,IAI5C,IAAMQ,EAAQ,CACVC,QAAS,OACT,wBAAwB,UAAxB,OAAmCJ,EAAnC,UACA,qBAAqB,UAArB,OAAgCD,EAAhC,UACAM,MAAO,eAGX,OACI,yBAAKd,UAAU,QAAQY,MAAOA,GACzBF,G,KC5BEK,MANf,SAAaR,GACX,OACE,kBAACD,EAAD,eAAOE,MAAO,EAAGC,MAAO,GAAOF,KCIfS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,IAAIC,EAAQ,ECOZ,IDNiBC,ECMXC,EAAOC,SAASC,eAAe,QDNpBH,ECQT,SAAAlB,GACNsB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKxB,eAAgBA,KAEvBmB,IDDAM,aAAY,kBAAMP,EAVH,WACX,IAAMQ,EAAM,CACRC,KAAKC,MAAMX,EAAM,GAAK,EACtBA,EAAQ,GAIZ,OAFAY,QAAQC,IAAIb,EAAOS,KACjBT,EACKS,EAGeK,MAAW,KDsHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLV,QAAQU,MAAMA,EAAMC,c","file":"static/js/main.bf0c1f66.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Knight() {\r\n  return <span>&#x2658;</span>;  // Umicode white knight\r\n}\r\n\r\nexport { Knight }","import React from 'react'\r\nimport { Knight } from './pieces';\r\nfunction Square({black, children} ) {\r\n    const className = 'square' + (black ? ' blackSquare' : '');\r\n    return (\r\n        <div className={className}>\r\n            {children}\r\n        </div>\r\n    )\r\n  }\r\n\r\nfunction renderSquare(row, col, knightPosition)\r\n{\r\n    const black = (row+col) % 2 === 0;\r\n    const isKnight = (row === knightPosition[0])  && (col === knightPosition[1]); \r\n    return (\r\n        <Square black={black}>\r\n            {isKnight? <Knight /> : null}\r\n        </Square>\r\n    );\r\n}\r\nfunction Board(props) {\r\n    const {nRows, nCols, knightPosition} = props;\r\n\r\n    let squares = [];\r\n    for(let row = 0; row < nRows; ++row) {\r\n        for(let col = 0; col < nCols; ++col) {\r\n            squares.push(renderSquare(row, col, knightPosition))\r\n        }\r\n    }\r\n    \r\n    const style = { // For now\r\n        display: 'grid',\r\n        \"grid-template-columns\": `repeat(${nCols},50px)`,\r\n        \"grid-template-rows\": `repeat(${nRows},50px)`,\r\n        width: 'fit-content'\r\n    };\r\n\r\n    return (\r\n        <div className=\"board\" style={style}> \r\n            {squares}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { Board, Square }","import React from 'react';\r\n\r\nimport { Board } from './board';\r\nimport './App.css'\r\n\r\n\r\nfunction App(props) {\r\n  return (\r\n    <Board nRows={6} nCols={4} {...props} />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","let count = 0;\r\nfunction observe(receive) {\r\n\r\n    const getPos = () => {\r\n        const pos = [\r\n            Math.floor(count/4) % 4,\r\n            count % 4,\r\n        ];\r\n        console.log(count, pos);\r\n        ++count; \r\n        return pos;\r\n    }\r\n\r\n    setInterval(() => receive(getPos()), 500);\r\n\r\n}\r\n\r\nexport { observe }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { observe } from './game'\r\n\r\nconst root = document.getElementById('root');\r\n\r\nobserve(knightPosition => {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <App knightPosition={knightPosition}/>\r\n    </React.StrictMode>,\r\n    root\r\n  );\r\n});\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}