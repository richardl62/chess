{"version":3,"sources":["constants.jsx","pieces.jsx","game.jsx","Square.jsx","board.jsx","serviceWorker.js","index.js"],"names":["itemTypes","Knight","useDrag","item","type","collect","monitor","isDragging","drag","className","ref","style","opacity","cursor","Piece","Error","boardLayout","nRows","nCols","topLeftBlack","squareIsBlack","row","col","sameColorTopleft","this","pieces","knightPosition","pieceType","observer","processSquareClick","toRow","toCol","rowDelta","Math","abs","colDelta","Square","black","children","onClick","Board","layout","squares","push","index","length","key","display","gridTemplateColumns","gridTemplateRows","width","DndProvider","backend","HTML5Backend","Boolean","window","location","hostname","match","root","document","getElementById","o","setObserver","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.acfb0001.chunk.js","sourcesContent":["const itemTypes = {\r\n    KNIGHT: 'kinght'\r\n};\r\n\r\nexport {itemTypes};","import React from 'react';\r\nimport { useDrag } from 'react-dnd';\r\n\r\nimport { itemTypes } from './constants';\r\n\r\nfunction Knight() {\r\n\r\n  const [ {isDragging}, drag ] = useDrag({\r\n    item: {type: itemTypes.KNIGHT},\r\n    collect: monitor => ({\r\n      isDragging: !!monitor.isDragging()\r\n    }),\r\n  });\r\n\r\n\r\n  return <div \r\n    className=\"piece\"\r\n    ref={drag}\r\n    style={{\r\n      opacity: isDragging ? 0.5 : 1.0,\r\n      cursor: 'move',\r\n    }}\r\n  >\r\n    &#x2658;\r\n  </div>;  // Umicode white knight\r\n}\r\n\r\nfunction Piece({type}) {\r\n    \r\n  if(type === itemTypes.KNIGHT) {\r\n      return <Knight></Knight>\r\n    }\r\n\r\n  if (type) {\r\n    throw new Error(\"Pieces other than knights are not yet supported\");\r\n  }\r\n\r\n    return null;\r\n}\r\nexport { Piece }","// Information about games that is indepantant of rendering */\r\n\r\nimport { itemTypes } from './constants';\r\n\r\nconst boardLayout = {\r\n    nRows: 4,\r\n    nCols: 6,\r\n    topLeftBlack: false,\r\n\r\n    squareIsBlack(row, col) {\r\n        const sameColorTopleft = (row + col) % 2 === 0;\r\n        return this.topLeftBlack ? sameColorTopleft : !sameColorTopleft;\r\n    }\r\n};\r\n\r\nlet pieces = {\r\n    knightPosition: [0, 0],\r\n\r\n    pieceType(row, col) {\r\n        if ((row === this.knightPosition[0]) && (col === this.knightPosition[1])) {\r\n            return itemTypes.KNIGHT;\r\n        }\r\n\r\n        return null;\r\n    }\r\n};\r\n\r\nlet observer = null;\r\n\r\n\r\nfunction setObserver(o) {\r\n    if(observer) {\r\n        throw new Error(\"Multiple observers not supported\");\r\n    }\r\n    \r\n    observer = o;\r\n    observer(pieces);\r\n}\r\n\r\nfunction knightMove(toRow, toCol) {\r\n    pieces.knightPosition = [toRow, toCol];\r\n    observer(pieces);\r\n}\r\n\r\n\r\nfunction processSquareClick(row, col) {\r\n    const rowDelta = Math.abs(row - pieces.knightPosition[0]);\r\n    const colDelta = Math.abs(col - pieces.knightPosition[1]);\r\n\r\n    if((rowDelta === 1 && colDelta === 2) || (rowDelta === 2 && colDelta === 1) )\r\n    {\r\n        knightMove(row,col);\r\n    }\r\n}\r\n\r\nexport { setObserver, boardLayout, processSquareClick}","import React from 'react';\r\n\r\nexport function Square({ black, children, onClick }) {\r\n    const className = 'square' + (black ? ' blackSquare' : '');\r\n    return (\r\n        <div className={className} onClick={onClick}>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport { Piece } from './pieces';\r\nimport { processSquareClick } from './game';\r\nimport { Square } from './Square';\r\n\r\n\r\nfunction Board({layout, pieces}) {\r\n    const nRows = layout.nRows;\r\n    const nCols = layout.nCols;\r\n\r\n    let squares = [];\r\n    for (let row = 0; row < nRows; ++row) {\r\n        for (let col = 0; col < nCols; ++col) {\r\n            squares.push(\r\n                <Square \r\n                    index={squares.length} \r\n                    key={[row, col]} \r\n                    black={layout.squareIsBlack(row, col)}\r\n                    onClick={() => processSquareClick(row, col)}\r\n                    >\r\n                    <Piece type={pieces.pieceType(row, col)} />\r\n                </Square>\r\n            );\r\n        }\r\n    }\r\n\r\n    const style = { // For now\r\n        display: 'grid',\r\n        gridTemplateColumns: `repeat(${nCols},50px)`,\r\n        gridTemplateRows: `repeat(${nRows},50px)`,\r\n        width: 'fit-content',\r\n    };\r\n\r\n    return (\r\n        <DndProvider backend={HTML5Backend} >\r\n            <div className=\"board\" style={style}>\r\n                {squares}\r\n            </div>\r\n        </DndProvider>\r\n    );\r\n}\r\n\r\nexport { Board }","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Board } from './board';\r\nimport {setObserver, boardLayout} from './game';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './main.css';\r\n\r\nconst root = document.getElementById('root');\r\n\r\nsetObserver(pieces => {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <Board layout={boardLayout} pieces={pieces} />\r\n    </React.StrictMode>,\r\n    root\r\n  );\r\n});\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}