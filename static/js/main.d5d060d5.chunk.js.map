{"version":3,"sources":["board_layout.ts","constants.ts","piece.tsx","square.tsx","board.tsx","core-piece.ts","starting_layouts.ts","game_control.tsx","state_manager.ts","game.tsx","serviceWorker.js","index.tsx"],"names":["BoardLayout","corePieces","topLeftBlack","_corePieces","_topLeftBlack","Array","Error","this","Object","seal","map","row","col","undefined","newPiece","sanityCheckRowCol","id","nRows","nCols","cp","piece","fill","isBlack","otherRow","tmp","length","itemTypes","Piece","corePiece","gameOptions","useDrag","item","type","collect","monitor","isDragging","end","dragEnd","didDrop","drag","dragBehaviour","move","className","ref","name","SimpleSquare","color","props","children","React","PureComponent","DroppableSquare","options","useDrop","accept","drop","movePiece","isOver","style","position","width","height","addHeader","elems","rowName","key","elemName","push","String","fromCharCode","addRow","layout","makeBoarderElem","makeSquare","Board","reverseRowOrder","display","gridTemplateColumns","gridTemplateRows","CorePiece","freeze","CorePieceFactory","_lastUsedId","make","layouts","standard","copyableTop","board","copyableBottom","displayName","fiveASide","test","layoutNames","keys","GameControl","currentLayout","boardLayoutName","onChange","setBoardLayout","checked","htmlFor","replace","onClick","clear","flip","disabled","canUndo","undo","canRedo","redo","restart","StateManager","initialState","_states","_stateIndex","state","changeState","slice","RowOfPieces","index","makeBoardState","cpf","makeCorePiece","startingLayouts","pieces","copyablePiecesTop","boardLayout","copyablePiecesBottom","layoutName","Game","corePieceFactory","useRef","current","useEffect","document","title","useState","gameState","setGameState","setReverseRowOrder","gameStateManager","doSetGameState","newState","setState","gameControl","copy","clearSquares","pieceId","newBoardLayout","bp","findCorePiecebyId","setCorePiece","obp","find","p","findOffBoardPiece","copiedPiece","dropped","onBoard","Boolean","copyablePieces","showAtTop","DndProvider","backend","HTML5Backend","window","location","hostname","match","root","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d5d060d5.chunk.js","sourcesContent":["import {CorePiece} from \"./core-piece\";\r\ntype CorePieceArray = Array<Array<CorePiece|null>>;\r\n\r\nclass BoardLayout {\r\n\r\n    private _corePieces : CorePieceArray;\r\n    private _topLeftBlack : boolean;\r\n    // Input is of form show below.  Each element is CorePiece or null.\r\n    // [\r\n    //     [r0c0, r0c1. ...],\r\n    //     [r1c0, r1c1. ...], \r\n    //     ...\r\n    // ]\r\n    constructor(corePieces: CorePieceArray, topLeftBlack: boolean) {\r\n        if(!(corePieces instanceof Array && typeof topLeftBlack === \"boolean\")) {\r\n            throw new Error(\"Bad input to BoardLayout\");\r\n        }\r\n        this._corePieces = corePieces;\r\n        this._topLeftBlack = topLeftBlack;\r\n        Object.seal(this);\r\n    }\r\n\r\n    copy() {\r\n        return new BoardLayout(\r\n            this._corePieces.map(row => [...row]), \r\n            this._topLeftBlack\r\n        );\r\n    }\r\n\r\n    get nRows() {return this._corePieces.length;}\r\n    get nCols() {return this._corePieces[0].length;}\r\n\r\n    private sanityCheckRowCol(row :number, col: number) {\r\n        if(this._corePieces[row][col] === undefined) {\r\n            throw new Error(`Invalid row or column number: ${row} ${col}`)\r\n        }\r\n    }\r\n\r\n    // Null represents an emoty square.\r\n    setCorePiece(row :number, col: number, newPiece: CorePiece | null ) {\r\n        this.sanityCheckRowCol(row,col);\r\n\r\n        this._corePieces[row][col] = newPiece; \r\n    }\r\n\r\n    corePiece(row: number, col: number) {\r\n        this.sanityCheckRowCol(row, col);\r\n\r\n        return this._corePieces[row][col];\r\n    }\r\n\r\n    isBlack(row: number, col: number) {\r\n        const asTopLeft = (row + col) % 2 === 0;\r\n        return asTopLeft ? this._topLeftBlack : !this._topLeftBlack;\r\n    }\r\n\r\n   findCorePiecebyId(id: number) {\r\n        for(let row = 0; row < this.nRows; ++row) {\r\n            for(let col = 0; col < this.nCols; ++col) {\r\n                const cp = this._corePieces[row][col];\r\n                if(cp && cp.id === id) {\r\n                    return {row:row, col:col, piece:cp};\r\n                }\r\n            }\r\n        }\r\n    \r\n        return null;\r\n    }\r\n\r\n    clearSquares() {\r\n        for(let row of this._corePieces) {\r\n            row.fill(null);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    reserveRows() {\r\n        this._topLeftBlack = this.isBlack(this.nRows-1, 0);\r\n\r\n        let cp = this._corePieces; \r\n        for(let row = 0; row < this.nRows/2; ++row) {\r\n            const otherRow = this.nRows - (row+1);\r\n            for(let col = 0; col < this.nCols; ++col) {\r\n                const tmp = cp[row][col];\r\n                cp[row][col] = cp[otherRow][col];\r\n                cp[otherRow][col] = tmp;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport {BoardLayout};","const itemTypes = {\r\n    PIECE: 'piece'\r\n};\r\n\r\nexport {itemTypes};","import React from 'react';\r\nimport { useDrag } from 'react-dnd';\r\nimport { itemTypes } from './constants';\r\nimport { CorePiece } from './core-piece';\r\n\r\nimport SVGPiece from 'react-chess-pieces';\r\n\r\ntype GameOptions = any; /*KLUDGE*/\r\n\r\ninterface PieceProps {\r\n  gameOptions: GameOptions;\r\n  corePiece: CorePiece;\r\n}\r\n\r\nconst Piece : React.FC<PieceProps> = ({ corePiece, gameOptions }) => {\r\n\r\n  const [{ isDragging }, drag ] = useDrag({\r\n    item: {\r\n      type: itemTypes.PIECE,\r\n      id: corePiece.id,\r\n    },\r\n    collect: monitor => ({\r\n      isDragging: !!monitor.isDragging(),\r\n    }),\r\n    end: (item, monitor) => gameOptions.dragEnd(corePiece.id, monitor.didDrop()),\r\n  });\r\n\r\n  if (isDragging && gameOptions.dragBehaviour(corePiece.id).move) {\r\n    /* Hide the original piece when moving */\r\n    return null;\r\n  }\r\n  else {\r\n    return (\r\n      <div\r\n        className='piece-div'\r\n        ref={drag}\r\n      >\r\n        <SVGPiece piece={corePiece.name} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { Piece } ","import React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport { itemTypes } from './constants';\r\nimport { Piece } from './piece';\r\nimport { CorePiece } from './core-piece';\r\n\r\ntype GameOptions = any;\r\n\r\ninterface Props {\r\n    color?: 'black' | 'white';\r\n}\r\n\r\nclass SimpleSquare extends React.PureComponent<Props> {\r\n    render() {\r\n        const color = this.props.color;\r\n        const children = this.props.children;\r\n\r\n        let className = 'square';\r\n        if (color) {\r\n            if(color === 'black') {\r\n                className += ' black-square';\r\n            } else if(color === 'white') {\r\n                className += ' white-square';\r\n            } else {\r\n                throw new Error(`Unrecognised square color: ${color}`)\r\n            }\r\n        }\r\n        \r\n        return (\r\n            <div className='square-placeholder'>\r\n                <div className={className}>\r\n                    {children}\r\n                </div>\r\n           </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction DroppableSquare(options:\r\n    {\r\n        corePiece: CorePiece | null,\r\n        gameOptions: GameOptions, \r\n        color: 'black' | 'white',\r\n        row: number,\r\n        col: number,\r\n    }) {\r\n\r\n    const { corePiece, gameOptions, color, row, col} = options;\r\n\r\n    const [, drop] = useDrop({\r\n        accept: itemTypes.PIECE,\r\n \r\n        // The use of 'any' below is a kludge.  I am not sure how to type if properly, or\r\n        // even if proper typing is possible.\r\n        drop: (corePiece: any) => gameOptions.movePiece(corePiece.id, row, col),\r\n        collect: monitor => ({\r\n            isOver: !!monitor.isOver(),\r\n        }),\r\n    })\r\n    return (\r\n        <div ref={drop}\r\n            style={{\r\n                position: 'relative',\r\n                width: '100%',\r\n                height: '100%',\r\n            }}\r\n        >\r\n            <SimpleSquare color={color}>\r\n                {corePiece ? <Piece corePiece={corePiece} gameOptions={gameOptions} /> : null}\r\n            </SimpleSquare>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport {SimpleSquare, DroppableSquare};","import React, { ReactElement } from 'react';\r\nimport { DroppableSquare as BoardSquare } from './square';\r\nimport { BoardLayout } from './board_layout';\r\n\r\ntype Elems = Array<ReactElement>;\r\ntype GameOptions = any; /*KLUDGE*/\r\n\r\nfunction addHeader(nCols: number, elems: Elems, rowName: string) {\r\n    const key = (elemName: string | number) => rowName + '-' + elemName;\r\n    elems.push(<div key={key('start')} />);\r\n    for (let col = 0; col < nCols; ++col) {\r\n        elems.push(\r\n            <div\r\n                key={key(col)}\r\n                className='board-boarder board-boarder-letter'\r\n            >\r\n                {String.fromCharCode(65+col)}\r\n            </div>\r\n        );\r\n    }\r\n    elems.push(<div key={key('end')} />);\r\n}\r\n\r\nfunction addRow(layout: BoardLayout, row: number, gameOptions: GameOptions, elems: Elems) {\r\n\r\n    let key = (name: string | number) =>  'r' + row + '-' + name;\r\n\r\n    let makeBoarderElem = (name: string) => (\r\n        <div\r\n            key={key(name)}\r\n            className='board-boarder board-boarder-number'\r\n        >\r\n            {layout.nRows - row}\r\n        </div>\r\n    );\r\n\r\n    let makeSquare = (col: number) => (\r\n        <BoardSquare\r\n            key={key(col)}\r\n\r\n            corePiece={layout.corePiece(row, col)}\r\n            gameOptions={gameOptions}\r\n\r\n            // This is the 'conceptual' color which must be black or white.\r\n            color={layout.isBlack(row, col) ? 'black' : 'white'}\r\n\r\n            row={row}\r\n            col={col}\r\n        />\r\n    )\r\n\r\n    elems.push(makeBoarderElem('start'));\r\n\r\n    for (let col = 0; col < layout.nCols; ++col) {\r\n        elems.push(makeSquare(col));\r\n    }\r\n\r\n    elems.push(makeBoarderElem('end'));\r\n}\r\n\r\n\r\nfunction Board({ layout, gameOptions }: {\r\n    layout: BoardLayout,\r\n    gameOptions: GameOptions,\r\n    })\r\n    {\r\n    const nRows = layout.nRows;\r\n    const nCols = layout.nCols;\r\n\r\n    let elems: Elems = [];\r\n\r\n    addHeader(nCols, elems, 'top');\r\n    for (let row = 0; row < nRows; ++row) {\r\n        const rowToAdd = gameOptions.reverseRowOrder ? nRows - 1 - row : row;\r\n        addRow(layout, rowToAdd, gameOptions, elems);\r\n    }\r\n    addHeader(nCols, elems, 'bottom');\r\n\r\n    const style = { // For now\r\n        display: 'grid',\r\n        gridTemplateColumns: `repeat(${nCols+2},auto)`,\r\n        gridTemplateRows: `repeat(${nRows+2},auto)`,\r\n    };\r\n\r\n    return (\r\n        <div className=\"board\" style={style}>\r\n            {elems}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport { Board }\r\n","type CorePieceName = string; // Could do better\r\ntype CorePieceId = number;\r\n\r\nclass CorePiece {\r\n    name: CorePieceName;\r\n    id: CorePieceId;\r\n\r\n    constructor(name: CorePieceName, id: CorePieceId) {\r\n      this.id = id;\r\n      this.name = name;\r\n      Object.freeze(this);\r\n    }\r\n  }\r\n  \r\n  class CorePieceFactory {\r\n    private _lastUsedId: number;\r\n    \r\n    constructor() {\r\n      this._lastUsedId = 0;\r\n    }\r\n  \r\n\r\n    make(name: CorePieceName) {\r\n      ++this._lastUsedId;\r\n      return new CorePiece(name, this._lastUsedId);\r\n    }\r\n\r\n    copy(corePiece: CorePiece) {\r\n      return this.make(corePiece.name);\r\n    }\r\n  }\r\n\r\n  export { CorePiece, CorePieceFactory }\r\n  export type { CorePieceId, CorePieceName }","const layouts = {\r\n    standard: {\r\n        copyableTop: ['p', 'n',  'b',  'r',  'q',  'k'],\r\n\r\n        board: [\r\n            ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],\r\n            ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\r\n            ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],\r\n        ],\r\n        topLeftBlack: false,\r\n\r\n        copyableBottom: ['P', 'N',  'B',  'R',  'Q',  'K' ],\r\n\r\n        displayName: 'Standard',\r\n    },\r\n\r\n    fiveASide: {\r\n        copyableTop: ['p', 'n',  'b',  'r',  'q',  'k'],\r\n\r\n        board: [\r\n            ['r', 'n', 'b', 'q', 'k'],\r\n            ['p', 'p', 'p', 'p', 'p'],\r\n            [null, null, null, null, null],\r\n            [null, null, null, null, null],\r\n            ['P', 'P', 'P', 'P', 'P'],\r\n            ['R', 'N', 'B', 'Q', 'K'],\r\n        ],\r\n        topLeftBlack: false,\r\n\r\n        copyableBottom: ['P', 'N',  'B',  'R',  'Q',  'K' ],\r\n\r\n        displayName: '5-a-side',\r\n    },\r\n\r\n    test: {\r\n        copyableTop: ['p'],\r\n\r\n        board: [\r\n            ['p'],\r\n            [null],\r\n            ['P'],\r\n        ],\r\n        topLeftBlack: false,\r\n\r\n        copyableBottom: ['P'],\r\n\r\n        displayName: 'test',\r\n    },\r\n};\r\n\r\nconst defaultLayoutName = 'standard';\r\n\r\nexport default layouts;\r\nexport {defaultLayoutName};\r\n","import React from 'react';\r\nimport layouts from './starting_layouts';\r\n\r\ntype LayoutKey = keyof typeof layouts;\r\nconst layoutNames = Object.keys(layouts) as Array<LayoutKey>; // Kludge?\r\n\r\ntype GameOptions = any; /*KLUDGE*/\r\n\r\nfunction displayName(layoutName: LayoutKey) {\r\n    // replace '-' with non-breaking space\r\n    return layouts[layoutName].displayName.replace(\"o\", \"&#8209;\");\r\n}\r\n\r\ninterface GameControlProps {\r\n    gameOptions: GameOptions,\r\n};\r\n\r\nconst GameControl : React.FC<GameControlProps>  = ({gameOptions}) => {\r\n    const currentLayout = gameOptions.boardLayoutName();\r\n\r\n    const makeGameTypeItem = (name: LayoutKey) => (\r\n        <div key={name}>\r\n            <input type=\"radio\" name=\"game-type\" id={name}\r\n                onChange={() => gameOptions.setBoardLayout(name)}\r\n                checked={currentLayout === name}\r\n            />\r\n\r\n            <label htmlFor={name}>{displayName(name)}</label>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"game-control\" >\r\n            <div className=\"game-type\">\r\n                {layoutNames.map(makeGameTypeItem)}\r\n            </div>\r\n\r\n            <div className='buttons'>\r\n                <button type='button' onClick={()=>gameOptions.clear()}> Clear</button>\r\n                <button type='button' onClick={()=>gameOptions.flip()}>Flip</button>\r\n            </div>\r\n\r\n            <div className='buttons'>\r\n                <button type='button'\r\n                    disabled={!gameOptions.canUndo}\r\n                    onClick={() => gameOptions.undo()}>\r\n                    Undo\r\n                </button>\r\n\r\n                <button type='button'\r\n                    disabled={!gameOptions.canRedo}\r\n                    onClick={() => gameOptions.redo()}>\r\n                    Redo\r\n                </button>\r\n\r\n                <button type='button'\r\n                    disabled={!gameOptions.canUndo} //Kludge? \r\n                    onClick={()=>gameOptions.restart()}>\r\n                    Restart\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default GameControl;\r\n","class StateManager<State> {\r\n    private _states: Array<State>;\r\n    private _stateIndex: number;\r\n\r\n    constructor(initialState: State) {\r\n        this._states = [initialState];\r\n        this._stateIndex = 0;\r\n    }\r\n\r\n    get canUndo() : boolean {return this._stateIndex > 0;}\r\n    get canRedo() : boolean {return this._stateIndex + 1 < this._states.length;}\r\n\r\n    get state() :State {return this._states[this._stateIndex];}\r\n\r\n    undo(): State {\r\n        if(!this.canUndo) {\r\n            throw new Error(\"StateManager Cannot undo\")\r\n        }\r\n        --this._stateIndex;\r\n        return this.state;\r\n    }\r\n\r\n    redo() : State {\r\n        if(!this.canRedo) {\r\n            throw new Error(\"StateManager Cannot redo\")\r\n        }\r\n        ++this._stateIndex;\r\n        return this.state;\r\n    }\r\n\r\n    restart() : State {\r\n        this._stateIndex = 0;\r\n        return this.state;\r\n    }\r\n\r\n    setState(changeState: Partial<State>) : void {\r\n        // Remove states afters the current state\r\n        this._states = this._states.slice(0, this._stateIndex+1);\r\n\r\n        // Add a new complete state\r\n        this._states.push({...this.state, ...changeState});\r\n        ++this._stateIndex;\r\n    }\r\n}\r\n\r\nexport default StateManager;","// Information about games that is indepantant of rendering */\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\n\r\nimport { BoardLayout } from './board_layout';\r\nimport { Board } from './board';\r\nimport { SimpleSquare } from './square'\r\nimport { CorePiece, CorePieceFactory, CorePieceId } from './core-piece';\r\nimport { Piece } from './piece';\r\nimport GameControl from './game_control';\r\nimport startingLayouts from './starting_layouts';\r\nimport { defaultLayoutName } from './starting_layouts';\r\nimport StateManager from './state_manager';\r\n// import { equivalentState } from './tools'\r\n\r\ntype BoardLayoutName = keyof typeof startingLayouts;\r\n\r\nfunction RowOfPieces({ corePieces, gameOptions }: {\r\n    corePieces: Array<CorePiece | null>,\r\n    gameOptions: any, // KLUDGE\r\n}) {\r\n    return (\r\n        <div className='row-of-pieces'>\r\n            {corePieces.map(\r\n                (cp, index) => (\r\n                    <SimpleSquare key={index}>\r\n                        {/* Kludge cp should never be null */}\r\n                        { cp ? <Piece corePiece={cp} gameOptions={gameOptions} /> : null}\r\n                    </SimpleSquare>\r\n                )\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction makeBoardState(name: BoardLayoutName, cpf: CorePieceFactory) {\r\n\r\n    const makeCorePiece = (name: string | null) => (name ? cpf.make(name) : null);\r\n\r\n    const layout = startingLayouts[name];\r\n    if (!layout) {\r\n        throw new Error(`Unrecognised layout name: ${name}`)\r\n    }\r\n\r\n    const pieces = layout.board.map((row: Array<string | null>) => row.map(makeCorePiece));\r\n\r\n    return {\r\n        copyablePiecesTop: layout.copyableTop.map(makeCorePiece),\r\n        boardLayout: new BoardLayout(pieces, layout.topLeftBlack),\r\n        copyablePiecesBottom: layout.copyableBottom.map(makeCorePiece),\r\n        layoutName: name,\r\n    };\r\n}\r\n\r\n\r\nconst Game : React.FC = () => {\r\n\r\n    let corePieceFactory = useRef(new CorePieceFactory()).current;\r\n\r\n    useEffect(() => {document.title = 'Chess'}, []);\r\n\r\n    const [gameState, setGameState] = useState(makeBoardState(defaultLayoutName, corePieceFactory));\r\n        \r\n    const [reverseRowOrder, setReverseRowOrder] = useState(false);\r\n    \r\n\r\n    let gameStateManager = useRef(new StateManager(gameState)).current;\r\n\r\n    const findOffBoardPiece = (pieceId: CorePieceId) => {\r\n        // Kludge: p should never be null\r\n        let piece = gameState.copyablePiecesTop.find(p => p && p.id === pieceId);\r\n        if (!piece) {\r\n            piece = gameState.copyablePiecesBottom.find(p => p && p.id === pieceId);\r\n        }\r\n\r\n        return piece;\r\n    }\r\n\r\n    const doSetGameState = (newState: Object) => {\r\n\r\n        // if(!equivalentState(gameState, gameStateManager.gameState)) {\r\n        //     console.log(\"gameState\", gameState, \"tateManager.gameState\", gameStateManager.gameState);\r\n        //     throw new Error(\"StateManager out of sync with client\");\r\n        // }\r\n    \r\n        gameStateManager.setState(newState);\r\n        setGameState(gameStateManager.state);\r\n    }\r\n    \r\n\r\n    const gameControl = {\r\n\r\n        canUndo: gameStateManager.canUndo,\r\n        canRedo: gameStateManager.canRedo,\r\n\r\n        undo: () => { setGameState(gameStateManager.undo());},\r\n        redo: () => { setGameState(gameStateManager.redo());},\r\n        restart: () => { setGameState(gameStateManager.restart());},\r\n\r\n        reverseRowOrder: reverseRowOrder,\r\n\r\n        setBoardLayout: (layoutName: BoardLayoutName) => {\r\n            doSetGameState(makeBoardState(layoutName, corePieceFactory));\r\n        },\r\n\r\n        boardLayoutName: () => gameState.layoutName,\r\n\r\n\r\n        clear: () => {\r\n            doSetGameState({\r\n                boardLayout: gameState.boardLayout.copy().clearSquares()\r\n            });\r\n        },\r\n\r\n        flip: () => {\r\n            setReverseRowOrder(!reverseRowOrder);\r\n        },\r\n\r\n        movePiece: (pieceId: CorePieceId, row: number, col: number) => {\r\n            let newBoardLayout = gameState.boardLayout.copy();\r\n\r\n            const bp = newBoardLayout.findCorePiecebyId(pieceId);\r\n            if (bp) {\r\n                if (row !== bp.row || col !== bp.col) {\r\n                    newBoardLayout.setCorePiece(row, col, bp.piece);\r\n                    newBoardLayout.setCorePiece(bp.row, bp.col, null);\r\n                    doSetGameState({ boardLayout: newBoardLayout, });\r\n                }\r\n            } else {\r\n                let obp = findOffBoardPiece(pieceId);\r\n\r\n                if (!obp) {\r\n                    throw new Error(`Piece with id ${pieceId} not found`);\r\n                }\r\n\r\n                const copiedPiece = corePieceFactory.copy(obp);\r\n                newBoardLayout.setCorePiece(row, col, copiedPiece);\r\n                doSetGameState({ boardLayout: newBoardLayout, });\r\n            }\r\n        },\r\n\r\n        dragEnd: (pieceId: CorePieceId, dropped: boolean) => {\r\n            if (!dropped) {\r\n                // The piece was dragged off the board. Now clear it.\r\n                const bp = gameState.boardLayout.findCorePiecebyId(pieceId);\r\n                if (bp) {\r\n                    let newBoardLayout = gameState.boardLayout.copy();\r\n                    newBoardLayout.setCorePiece(bp.row, bp.col, null);\r\n\r\n                    doSetGameState({\r\n                        boardLayout: newBoardLayout,\r\n                    })\r\n                }\r\n            }\r\n        },\r\n\r\n        dragBehaviour: (pieceId: CorePieceId) => {\r\n            const onBoard = Boolean(gameState.boardLayout.findCorePiecebyId(pieceId));\r\n\r\n            return {\r\n                move: onBoard,\r\n                copy: !onBoard,\r\n            };\r\n        },\r\n    }\r\n\r\n    const copyablePieces = (showAtTop: boolean) => {\r\n        const top = reverseRowOrder ? !showAtTop : showAtTop;\r\n\r\n        return top ? gameState.copyablePiecesTop : gameState.copyablePiecesBottom;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <DndProvider backend={HTML5Backend}>\r\n                <div className=\"game\">\r\n\r\n                    <RowOfPieces\r\n                        corePieces={copyablePieces(true)}\r\n                        gameOptions={gameControl}\r\n                    />\r\n\r\n                    <Board\r\n                        layout={gameState.boardLayout}\r\n                        gameOptions={gameControl}\r\n                    />\r\n\r\n                    <RowOfPieces\r\n                        corePieces={copyablePieces(false)}\r\n                        gameOptions={gameControl}\r\n                    />\r\n                </div>\r\n            </DndProvider>\r\n            <GameControl gameOptions={gameControl} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport { Game }","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Game } from './game';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './main.css';\r\n\r\nconst root = document.getElementById('root');\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Game />\r\n  </React.StrictMode>,\r\n  root\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}