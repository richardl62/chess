{"version":3,"sources":["constants.jsx","pieces.jsx","board_layout.jsx","Square.jsx","board.jsx","game.jsx","serviceWorker.js","index.js"],"names":["itemTypes","blackPieceNames","whitePieceNames","pieceNames","concat","lastUsedId","Piece","corePiece","useDrag","item","type","id","drag","className","ref","name","CorePiece","dragBehaviour","includes","Error","this","_id","_name","_moveWhenDragged","Object","freeze","__moveWhenDragged","standardLayout","topLeftBlack","BoardLayout","toCopy","_corePieces","_topPieces","map","subArray","_topLeftBlack","seal","row","col","newPiece","undefined","nRows","nCols","cp","piece","length","Square","props","black","children","React","PureComponent","BoardSquare","movePiece","isBlack","useDrop","accept","drop","collect","monitor","isOver","style","position","width","height","Board","layout","squares","push","index","key","display","gridTemplateColumns","gridTemplateRows","PermanentPieces","corePieces","Game","makeCorePiece","pieceId","newBoardLayout","state","boardLayout","bp","findCorePiecebyId","nbp","_CopyOnDragPieces","all","find","p","setState","bcod","wcod","white","DndProvider","backend","HTML5Backend","Component","Boolean","window","location","hostname","match","root","document","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.471dab89.chunk.js","sourcesContent":["const itemTypes = {\r\n    PIECE: 'piece'\r\n};\r\n\r\nexport {itemTypes};","import React from 'react';\r\nimport { useDrag } from 'react-dnd';\r\n\r\nimport { itemTypes } from './constants';\r\n\r\nconst blackPieceNames = ['bC', 'bK', 'bB', 'bQ', 'bK', 'bP'];\r\nconst whitePieceNames = ['wC', 'wK', 'wB', 'wQ', 'wK', 'wP'];\r\n\r\nconst pieceNames = blackPieceNames.concat(whitePieceNames);\r\n\r\nlet lastUsedId = 0;\r\n\r\nfunction Piece({corePiece}) {\r\n\r\n  const [ , drag ] = useDrag({\r\n    item: {\r\n      type: itemTypes.PIECE,\r\n      id: corePiece.id,\r\n    },\r\n  });\r\n\r\n\r\n  return <div \r\n    className=\"piece\"\r\n    ref={drag}\r\n  >\r\n    {corePiece.name}\r\n  </div>;  // Unicode white knight\r\n}\r\n\r\nclass CorePiece {\r\n  constructor({name, dragBehaviour}) {\r\n\r\n    if(!pieceNames.includes(name)) {\r\n      throw new Error(`CorePiece given unrecognised piece name: ${name}`)\r\n    }\r\n\r\n    if(!['move', 'copy'].includes(dragBehaviour)) {\r\n      throw new Error(`CorePiece give unrecognised drag behaviour: ${dragBehaviour}`)\r\n    }\r\n\r\n    ++lastUsedId;\r\n\r\n    this._id = lastUsedId;  // ? Use Symbol instead ?\r\n    this._name = name;\r\n    this._moveWhenDragged = dragBehaviour === 'move';\r\n    Object.freeze(this);\r\n  }\r\n\r\n  get id() {return this._id;}\r\n  get name() {return this._name;}\r\n\r\n  // Exactly one of moveWhenDragged and copyWhenDragged will be true\r\n  get moveWhenDragged() { return this.__moveWhenDragged; }\r\n  get copyWhenDragged() { return !this._moveWhenDragged; }\r\n};\r\n\r\nexport { Piece, CorePiece, blackPieceNames, whitePieceNames }","import { CorePiece } from \"./pieces\";\r\n\r\n\r\nlet standardLayout = [\r\n    ['bC', 'bK', 'bB', 'bQ', 'bK', 'bB', 'bK', 'bC'],\r\n    ['bP', 'bP', 'bP', 'bP', 'bP', 'bP', 'bP', 'bP'],\r\n    [null, null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null, null],\r\n    ['wP', 'wP', 'wP', 'wP', 'wP', 'wP', 'wP', 'wP'],\r\n    ['wC', 'wK', 'wB', 'wQ', 'wK', 'wB', 'wK', 'wC'],\r\n];\r\nstandardLayout.topLeftBlack=true;\r\nObject.freeze(standardLayout);\r\n\r\n\r\nclass BoardLayout {\r\n\r\n    constructor(toCopy) {\r\n        if(toCopy) {\r\n            this._corePieces = toCopy._corePieces;\r\n            this._topPieces = toCopy._corePieces;\r\n        } else {\r\n            this._corePieces = standardLayout.map(subArray => subArray.map(\r\n                name => (name ? new CorePiece({ name: name, dragBehaviour: 'move' }) : null)\r\n            ));\r\n            this._topLeftBlack = false;\r\n        }\r\n\r\n        Object.seal(this);\r\n    }\r\n\r\n    get nRows() {return this._corePieces.length;}\r\n    get nCols() {return this._corePieces[0].length;}\r\n\r\n    // Get or set the core piece at the specified square. Null represents an emoty square.\r\n    corePiece(row, col, newPiece) {\r\n        if(this._corePieces[row][col] === undefined) {\r\n            throw new Error(`Invalid row or column number: ${row} ${col}`)\r\n        }\r\n\r\n        if(newPiece !== undefined) {\r\n            this._corePieces[row][col] = newPiece; \r\n        }\r\n\r\n        return this._corePieces[row][col];\r\n    }\r\n\r\n    isBlack(row, col) {\r\n        const asTopLeft = (row + col) % 2 === 0;\r\n        return asTopLeft ? this._topLeftBlack : !this._topLeftBlack;\r\n    }\r\n\r\n   findCorePiecebyId(id) {\r\n        for(let row = 0; row < this.nRows; ++row) {\r\n            for(let col = 0; col < this.nCols; ++col) {\r\n                const cp = this._corePieces[row][col];\r\n                if(cp && cp.id === id) {\r\n                    return {row:row, col:col, piece:cp};\r\n                }\r\n            }\r\n        }\r\n    \r\n        return null;\r\n    }\r\n}\r\n\r\nexport {BoardLayout};","import React from 'react';\r\n\r\nclass Square extends React.PureComponent {\r\n\r\n    render() {\r\n        let { black, children } = this.props;\r\n\r\n        const className = 'square' + (black ? ' blackSquare' : '');\r\n        return (\r\n            <div className={className}>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Square }","import React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport { itemTypes } from './constants';\r\nimport { Piece } from './pieces';\r\nimport { Square } from './Square';\r\n\r\nfunction BoardSquare({ corePiece, movePiece, isBlack, row, col }) {\r\n    const [, drop] = useDrop({\r\n        accept: itemTypes.PIECE,\r\n        drop: item => movePiece(item.id, row, col),\r\n        collect: monitor => ({\r\n            isOver: !!monitor.isOver(),\r\n        }),\r\n    })\r\n    return (\r\n        <div ref={drop}\r\n            style={{\r\n                position: 'relative',\r\n                width: '100%',\r\n                height: '100%',\r\n            }}\r\n        >\r\n            <Square black={isBlack}>\r\n                {corePiece ? <Piece corePiece={corePiece} /> : null }\r\n            </Square>\r\n            \r\n        </div> \r\n        \r\n    );\r\n}\r\n\r\nfunction Board({layout, movePiece}) {\r\n    const nRows = layout.nRows;\r\n    const nCols = layout.nCols;\r\n\r\n    let squares = [];\r\n    for (let row = 0; row < nRows; ++row) {\r\n        for (let col = 0; col < nCols; ++col) {\r\n            squares.push(\r\n                <BoardSquare \r\n                    corePiece={layout.corePiece(row, col)}\r\n                    movePiece={movePiece}\r\n                    index={squares.length} \r\n                    key={[row, col]} \r\n                    isBlack={layout.isBlack(row, col)}\r\n                    row={row}\r\n                    col={col}\r\n                />\r\n            );\r\n        }\r\n    }\r\n\r\n    const style = { // For now\r\n        display: 'grid',\r\n        gridTemplateColumns: `repeat(${nCols},50px)`,\r\n        gridTemplateRows: `repeat(${nRows},50px)`,\r\n        width: 'fit-content',\r\n    };\r\n\r\n        \r\n    return (\r\n        <div className=\"board\" style={style}>\r\n            {squares}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport { Board }\r\n","// Information about games that is indepantant of rendering */\r\n\r\nimport React from 'react';\r\nimport { BoardLayout } from './board_layout';\r\nimport { Board } from './board';\r\nimport { blackPieceNames, whitePieceNames, Piece, CorePiece } from './pieces';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\n\r\nfunction PermanentPieces({ corePieces }) {\r\n    return (\r\n        <div className=\"permanentPieces\">\r\n            {corePieces.map(\r\n                (cp, index) => <Piece corePiece={cp} index={index} key={cp.id} />\r\n            )}   \r\n        </div>\r\n    ); \r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {boardLayout: new BoardLayout()}\r\n\r\n        function makeCorePiece(name) {\r\n            return new CorePiece({name:name, dragBehaviour:'copy'});\r\n        }\r\n\r\n        const bcod = blackPieceNames.map(makeCorePiece);\r\n        const wcod = whitePieceNames.map(makeCorePiece);\r\n           \r\n        this._CopyOnDragPieces = {\r\n            black: bcod,\r\n            white: wcod,\r\n            all: bcod.concat(wcod),\r\n        };\r\n    }\r\n\r\n    movePiece = (pieceId, row, col) => {\r\n\r\n        let newBoardLayout = new BoardLayout(this.state.boardLayout);\r\n        const bp = newBoardLayout.findCorePiecebyId(pieceId);\r\n        if ( bp ) {\r\n            if (row !== bp.row || col !== bp.col) {\r\n                newBoardLayout.corePiece(row, col, bp.piece);\r\n                newBoardLayout.corePiece(bp.row, bp.col, null);\r\n            }\r\n        } else {\r\n            const nbp = this._CopyOnDragPieces.all.find(p => p.id === pieceId);\r\n            if (!nbp) {\r\n                throw new Error(`Piece with id ${pieceId} not found`);\r\n            }\r\n            newBoardLayout.corePiece(row,col, new CorePiece({ name: nbp.name, dragBehaviour: 'move' }))\r\n        }\r\n\r\n        this.setState({\r\n            boardLayout: newBoardLayout,\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <DndProvider backend={HTML5Backend}>\r\n                <div className=\"chess-game\">\r\n\r\n                    <PermanentPieces \r\n                        corePieces={this._CopyOnDragPieces.black}     \r\n                    />\r\n\r\n                    <Board\r\n                        layout={this.state.boardLayout}\r\n                        movePiece={this.movePiece}\r\n                    />\r\n\r\n                    <PermanentPieces \r\n                        corePieces={this._CopyOnDragPieces.white}     \r\n                    />\r\n\r\n                </div>\r\n            </DndProvider>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport { Game }\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Game } from './game';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './main.css';\r\n\r\nconst root = document.getElementById('root');\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Game />\r\n  </React.StrictMode>,\r\n  root\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}