{"version":3,"sources":["board_layout.ts","constants.jsx","piece.jsx","square.jsx","board.jsx","core-piece.ts","starting_layouts.jsx","game_control.jsx","tools.ts","state_manager.ts","game.jsx","serviceWorker.js","index.js"],"names":["BoardLayout","corePieces","topLeftBlack","_corePieces","_topLeftBlack","Array","Error","this","Object","seal","map","row","col","newPiece","undefined","id","nRows","nCols","cp","piece","fill","isBlack","otherRow","tmp","length","itemTypes","Piece","corePiece","gameOptions","useDrag","item","type","collect","monitor","isDragging","end","dragEnd","didDrop","drag","dragBehaviour","move","className","ref","name","SimpleSquare","props","color","children","React","PureComponent","DroppableSquare","useDrop","accept","drop","movePiece","isOver","style","position","width","height","addHeader","elems","rowName","key","elemName","push","String","fromCharCode","addRow","layout","makeBoarderElem","numberRowsFromTop","makeSquare","index","Board","display","gridTemplateColumns","gridTemplateRows","CorePiece","freeze","CorePieceFactory","_lastUsedId","input","make","layouts","standard","copyableTop","board","copyableBottom","displayName","fiveASide","layoutNames","keys","GameControl","currentLayout","boardLayout","onChange","checked","htmlFor","replace","onClick","clear","flip","disabled","canUndo","undo","canRedo","redo","restart","equivalentState","state1","state2","console","log","sub","full","compatibleSubState","StateManager","clientFunctions","_states","_stateIndex","_clientFunctions","getState","clientState","state","setState","sanityCheck","ok","_setClientState","stateChange","newState","slice","RowOfPieces","makeBoardState","cpf","makeCorePiece","startingLayouts","pieces","copyablePiecesTop","copyablePiecesBottom","layoutName","Game","_corePieceFactory","stateManager","document","title","doSetState","copy","clearSquares","reserveRows","pieceId","find","p","newBoardLayout","bp","findCorePiecebyId","obp","_findOffBoardPiece","copiedPiece","dropped","onBoard","Boolean","DndProvider","backend","HTML5Backend","renderMainGame","Component","window","location","hostname","match","root","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b5f64bdb.chunk.js","sourcesContent":["type corePiece = any; // TEMPORARY KLUDGE\r\ntype corePieceArray = [corePiece][];\r\n\r\nclass BoardLayout {\r\n\r\n    private _corePieces : corePieceArray;\r\n    private _topLeftBlack : boolean;\r\n    // Input is of form show below.  Each element is CorePiece or null.\r\n    // [\r\n    //     [r0c0, r0c1. ...],\r\n    //     [r1c0, r1c1. ...], \r\n    //     ...\r\n    // ]\r\n    constructor(corePieces: corePieceArray, topLeftBlack: boolean) {\r\n        if(!(corePieces instanceof Array && typeof topLeftBlack === \"boolean\")) {\r\n            throw new Error(\"Bad input to BoardLayout\");\r\n        }\r\n        this._corePieces = corePieces;\r\n        this._topLeftBlack = topLeftBlack;\r\n        Object.seal(this);\r\n    }\r\n\r\n    copy() {\r\n        return new BoardLayout(\r\n            this._corePieces.map(row => [...row]), \r\n            this._topLeftBlack\r\n        );\r\n    }\r\n\r\n    get nRows() {return this._corePieces.length;}\r\n    get nCols() {return this._corePieces[0].length;}\r\n\r\n    // Get or set the core piece at the specified square. Null represents an emoty square.\r\n    corePiece(row :number, col: number, newPiece: corePiece) {\r\n        if(this._corePieces[row][col] === undefined) {\r\n            throw new Error(`Invalid row or column number: ${row} ${col}`)\r\n        }\r\n\r\n        if(newPiece !== undefined) {\r\n            this._corePieces[row][col] = newPiece; \r\n        }\r\n\r\n        return this._corePieces[row][col];\r\n    }\r\n\r\n    isBlack(row: number, col: number) {\r\n        const asTopLeft = (row + col) % 2 === 0;\r\n        return asTopLeft ? this._topLeftBlack : !this._topLeftBlack;\r\n    }\r\n\r\n   findCorePiecebyId(id: number) {\r\n        for(let row = 0; row < this.nRows; ++row) {\r\n            for(let col = 0; col < this.nCols; ++col) {\r\n                const cp = this._corePieces[row][col];\r\n                if(cp && cp.id === id) {\r\n                    return {row:row, col:col, piece:cp};\r\n                }\r\n            }\r\n        }\r\n    \r\n        return null;\r\n    }\r\n\r\n    clearSquares() {\r\n        for(let row of this._corePieces) {\r\n            row.fill(null);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    reserveRows() {\r\n        this._topLeftBlack = this.isBlack(this.nRows-1, 0);\r\n\r\n        let cp = this._corePieces; \r\n        for(let row = 0; row < this.nRows/2; ++row) {\r\n            const otherRow = this.nRows - (row+1);\r\n            for(let col = 0; col < this.nCols; ++col) {\r\n                const tmp = cp[row][col];\r\n                cp[row][col] = cp[otherRow][col];\r\n                cp[otherRow][col] = tmp;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport {BoardLayout};","const itemTypes = {\r\n    PIECE: 'piece'\r\n};\r\n\r\nexport {itemTypes};","import React from 'react';\r\nimport { useDrag } from 'react-dnd';\r\nimport { itemTypes } from './constants';\r\n\r\nimport SVGPiece from 'react-chess-pieces';\r\n\r\n\r\nfunction Piece({ corePiece, gameOptions }) {\r\n\r\n  const [{ isDragging }, drag ] = useDrag({\r\n    item: {\r\n      type: itemTypes.PIECE,\r\n      id: corePiece.id,\r\n    },\r\n    collect: monitor => ({\r\n      isDragging: !!monitor.isDragging(),\r\n    }),\r\n    end: (item, monitor) => gameOptions.dragEnd(corePiece.id, monitor.didDrop()),\r\n  });\r\n\r\n  if (isDragging && gameOptions.dragBehaviour(corePiece.id).move) {\r\n    /* Hide the original piece when moving */\r\n    return null;\r\n  }\r\n  else {\r\n    return (\r\n      <div\r\n        className='piece-div'\r\n        ref={drag}\r\n      >\r\n        <SVGPiece piece={corePiece.name} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { Piece } ","import React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport { itemTypes } from './constants';\r\nimport { Piece } from './piece';\r\n\r\nclass SimpleSquare extends React.PureComponent {\r\n    render() {\r\n        const { color, children } = this.props;\r\n\r\n        let className = 'square';\r\n        if (color) {\r\n            if(color === 'black') {\r\n                className += ' black-square';\r\n            } else if(color === 'white') {\r\n                className += ' white-square';\r\n            } else {\r\n                throw new Error(`Unrecognised square color: ${color}`)\r\n            }\r\n        }\r\n        \r\n        return (\r\n            <div className='square-placeholder'>\r\n                <div className={className}>\r\n                    {children}\r\n                </div>\r\n           </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction DroppableSquare({ corePiece, gameOptions, color, row, col }) {\r\n    const [, drop] = useDrop({\r\n        accept: itemTypes.PIECE,\r\n        drop: item => gameOptions.movePiece(item.id, row, col),\r\n        collect: monitor => ({\r\n            isOver: !!monitor.isOver(),\r\n        }),\r\n    })\r\n    return (\r\n        <div ref={drop}\r\n            style={{\r\n                position: 'relative',\r\n                width: '100%',\r\n                height: '100%',\r\n            }}\r\n        >\r\n            <SimpleSquare color={color}>\r\n                {corePiece ? <Piece corePiece={corePiece} gameOptions={gameOptions} /> : null}\r\n            </SimpleSquare>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport {SimpleSquare, DroppableSquare};","import React from 'react';\r\nimport { DroppableSquare as BoardSquare } from './square';\r\n\r\n\r\nfunction addHeader(nCols, elems, rowName) {\r\n    const key = elemName => rowName + '-' + elemName;\r\n    elems.push(<div key={key('start')} />);\r\n    for (let col = 0; col < nCols; ++col) {\r\n        elems.push(\r\n            <div\r\n                key={key(col)}\r\n                className='board-boarder board-boarder-letter'\r\n            >\r\n                {String.fromCharCode(65+col)}\r\n            </div>\r\n        );\r\n    }\r\n    elems.push(<div key={key('end')} />);\r\n}\r\n\r\nfunction addRow(layout, row, gameOptions, elems) {\r\n\r\n    let key = name =>  'r' + row + '-' + name;\r\n\r\n    let makeBoarderElem = name => (\r\n        <div\r\n            key={key(name)}\r\n            className='board-boarder board-boarder-number'\r\n        >\r\n            {gameOptions.numberRowsFromTop ? row + 1 : layout.nRows - row}\r\n        </div>\r\n    );\r\n\r\n    let makeSquare = col => (\r\n        <BoardSquare\r\n            index={col}\r\n            key={key(col)}\r\n\r\n            corePiece={layout.corePiece(row, col)}\r\n            gameOptions={gameOptions}\r\n\r\n            // This is the 'conceptual' color which must be black or white.\r\n            color={layout.isBlack(row, col) ? 'black' : 'white'}\r\n\r\n            row={row}\r\n            col={col}\r\n        />\r\n    )\r\n\r\n    elems.push(makeBoarderElem('start'));\r\n\r\n    for (let col = 0; col < layout.nCols; ++col) {\r\n        elems.push(makeSquare(col));\r\n    }\r\n\r\n    elems.push(makeBoarderElem('end'));\r\n}\r\n\r\nfunction Board({layout, gameOptions}) {\r\n    const nRows = layout.nRows;\r\n    const nCols = layout.nCols;\r\n\r\n    let elems = [];\r\n\r\n    addHeader(nCols, elems, 'top');\r\n    for (let row = 0; row < nRows; ++row) {\r\n        addRow(layout, row, gameOptions, elems);\r\n    }\r\n    addHeader(nCols, elems, 'bottom');\r\n\r\n    const style = { // For now\r\n        display: 'grid',\r\n        gridTemplateColumns: `repeat(${nCols+2},auto)`,\r\n        gridTemplateRows: `repeat(${nRows+2},auto)`,\r\n    };\r\n\r\n    return (\r\n        <div className=\"board\" style={style}>\r\n            {elems}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport { Board }\r\n","class CorePiece {\r\n    name: string;\r\n    id: number;\r\n\r\n    constructor(name: string, id: number) {\r\n      this.id = id;\r\n      this.name = name;\r\n      Object.freeze(this);\r\n    }\r\n  }\r\n  \r\n  class CorePieceFactory {\r\n    private _lastUsedId: number;\r\n    \r\n    constructor() {\r\n      this._lastUsedId = 0;\r\n    }\r\n  \r\n    make(x: null) : null;\r\n    make(name: string) : CorePiece;\r\n\r\n    make(input: any) : any {\r\n  \r\n      if (input === null) {\r\n        return null;\r\n      }\r\n\r\n      ++this._lastUsedId;\r\n      return new CorePiece(input, this._lastUsedId);\r\n    }\r\n\r\n    copy(corePiece: CorePiece) {\r\n      return this.make(corePiece.name);\r\n    }\r\n  }\r\n\r\n  export { CorePiece, CorePieceFactory }","const layouts = {\r\n    standard: {\r\n        copyableTop: ['p', 'n',  'b',  'r',  'q',  'k'],\r\n\r\n        board: [\r\n            ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],\r\n            ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\r\n            ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],\r\n        ],\r\n        topLeftBlack: false,\r\n\r\n        copyableBottom: ['P', 'N',  'B',  'R',  'Q',  'K' ],\r\n\r\n        displayName: 'Standard',\r\n    },\r\n\r\n    fiveASide: {\r\n        copyableTop: ['p', 'n',  'b',  'r',  'q',  'k'],\r\n\r\n        board: [\r\n            ['r', 'n', 'b', 'q', 'k'],\r\n            ['p', 'p', 'p', 'p', 'p'],\r\n            [null, null, null, null, null],\r\n            [null, null, null, null, null],\r\n            ['P', 'P', 'P', 'P', 'P'],\r\n            ['R', 'N', 'B', 'Q', 'K'],\r\n        ],\r\n        topLeftBlack: false,\r\n\r\n        copyableBottom: ['P', 'N',  'B',  'R',  'Q',  'K' ],\r\n\r\n        displayName: '5-a-side',\r\n    },\r\n};\r\n\r\nconst defaultLayoutName = 'standard';\r\n\r\nexport default layouts;\r\nexport {defaultLayoutName};\r\n","import React from 'react';\r\nimport layouts from './starting_layouts';\r\n\r\nconst layoutNames = Object.keys(layouts);\r\n\r\nfunction displayName(layoutName) {\r\n    // replace '-' with non-breaking space\r\n    return layouts[layoutName].displayName.replace(\"o\", \"&#8209;\");\r\n}\r\n\r\nfunction GameControl({gameOptions}) {\r\n\r\n    const currentLayout = gameOptions.boardLayout();\r\n\r\n    const makeGameTypeItem = name => (\r\n        <div key={name}>\r\n            <input type=\"radio\" name=\"game-type\" id={name}\r\n                onChange={() => gameOptions.boardLayout(name)}\r\n                checked={currentLayout === name}\r\n            />\r\n            <label htmlFor={name} name=\"game-type\">{displayName(name)}</label>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"game-control\" >\r\n            <div className=\"game-type\">\r\n                {layoutNames.map(makeGameTypeItem)}\r\n            </div>\r\n\r\n            <div className='buttons'>\r\n                <button type='button' onClick={()=>gameOptions.clear()}> Clear</button>\r\n                <button type='button' onClick={()=>gameOptions.flip()}>Flip</button>\r\n            </div>\r\n\r\n            <div className='buttons'>\r\n                <button type='undo'\r\n                    disabled={!gameOptions.canUndo}\r\n                    onClick={() => gameOptions.undo()}>\r\n                    Undo\r\n                </button>\r\n\r\n                <button type='redo'\r\n                    disabled={!gameOptions.canRedo}\r\n                    onClick={() => gameOptions.redo()}>\r\n                    Redo\r\n                </button>\r\n\r\n                <button type='button' onClick={()=>gameOptions.restart()}>Restart</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameControl;","interface State {[index: string]: any};\r\n\r\nfunction compatibleSubState(sub: State, full:  State) {\r\n    for(const key in sub) {\r\n        if(sub[key] !== full[key]) {\r\n            console.log(`sub[${key}] !== full[${key}]`, sub[key], full[key]);\r\n            return false;\r\n        } \r\n    }\r\n    return true;\r\n}\r\n\r\nfunction equivalentState(state1:  State, state2:  State) {\r\n    if(Object.keys(state1).length !== Object.keys(state2).length) {\r\n        console.log(\"States have different keys\", Object.keys(state1), Object.keys(state2));\r\n        return false;\r\n    }\r\n\r\n    return compatibleSubState(state1, state2);\r\n}\r\n\r\nexport {equivalentState};","import { equivalentState } from './tools';\r\n\r\ntype StateValue =  object;\r\n\r\n\r\ninterface ClientFunctions {\r\n    getState: () => StateValue,\r\n    setState: (s: StateValue) => void,\r\n};\r\n\r\nclass StateManager {\r\n    private _states: Array<StateValue>;\r\n    private _stateIndex: number;\r\n    private _clientFunctions: ClientFunctions;\r\n\r\n    // clientSetState is NOT called the initialState.\r\n    constructor(clientFunctions: ClientFunctions) {\r\n\r\n        this._states = [clientFunctions.getState()];\r\n        this._stateIndex = 0;\r\n\r\n        this._clientFunctions = clientFunctions;\r\n    }\r\n\r\n    get canUndo() : boolean {return this._stateIndex > 0;}\r\n    get canRedo() : boolean {return this._stateIndex + 1 < this._states.length;}\r\n    get state() :StateValue {return this._states[this._stateIndex];}\r\n\r\n    sanityCheck() : void {\r\n        // WARNING: Can give a false positive if the value passed to\r\n        // _clientFunctions.setState() is not (fully) available using \r\n        // _clientFunctions.getState();\r\n\r\n        const clientState = this._clientFunctions.getState();\r\n        if(!equivalentState(this.state, clientState)) {\r\n            console.log(\"this.state\", this.state, \"clientState\", clientState);\r\n            throw new Error(\"StateManager out of sync with client\");\r\n        }\r\n    }\r\n\r\n    private _setClientState() : void {\r\n        this._clientFunctions.setState(this.state); \r\n    }\r\n\r\n    undo() : boolean {\r\n        this.sanityCheck();\r\n\r\n        //console.log(\"before undo: stateIndex=\", this._stateIndex);\r\n        const ok = this.canUndo;\r\n        if(ok) {\r\n            --this._stateIndex;\r\n            this._setClientState(); \r\n        }\r\n        return ok;\r\n    }\r\n\r\n    redo() : boolean {\r\n        this.sanityCheck();\r\n\r\n        //console.log(\"before redo: stateIndex=\", this._stateIndex);\r\n        const ok = this.canRedo;\r\n        if(ok) {\r\n            ++this._stateIndex;\r\n            this._setClientState(); \r\n        }\r\n        return ok;\r\n    }\r\n\r\n    restart() : void {\r\n        this.sanityCheck();\r\n\r\n        if(this._stateIndex !== 0) {\r\n            this._stateIndex = 0;\r\n            this._setClientState();\r\n        }\r\n    }\r\n\r\n    setState(stateChange: StateValue) : void {\r\n        this.sanityCheck();\r\n\r\n        //Merge the stateChange into the currents tate;\r\n        const newState = {...this.state, ...stateChange};\r\n\r\n        // Remove states afters the current state\r\n        this._states = this._states.slice(0, this._stateIndex+1);\r\n        this._states.push(newState);\r\n        ++this._stateIndex;\r\n\r\n        if(this.state !== newState) {\r\n            throw new Error(\"internal error in StateManager.setState\");\r\n        }\r\n\r\n        this._setClientState();\r\n    }\r\n}\r\n\r\nexport default StateManager;","// Information about games that is indepantant of rendering */\r\n\r\nimport React from 'react';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\n\r\nimport { BoardLayout } from './board_layout';\r\nimport { Board } from './board';\r\nimport { SimpleSquare } from './square'\r\nimport { CorePieceFactory } from './core-piece';\r\nimport { Piece } from './piece';\r\nimport  GameControl from './game_control';\r\nimport  startingLayouts from './starting_layouts';\r\nimport  {defaultLayoutName} from './starting_layouts';\r\nimport  StateManager from './state_manager';\r\n\r\nfunction RowOfPieces({ corePieces, gameOptions }) {\r\n    return (\r\n        <div className='row-of-pieces'>\r\n            {corePieces.map(\r\n                (cp, index) => (\r\n                    <SimpleSquare key={index}>\r\n                        <Piece corePiece={cp} gameOptions={gameOptions} />\r\n                    </SimpleSquare>\r\n                )\r\n            )}   \r\n        </div>\r\n    ); \r\n}\r\n\r\nfunction makeBoardState(name, cpf) {\r\n\r\n    const makeCorePiece = name => cpf.make(name);\r\n\r\n    const layout = startingLayouts[name];\r\n    if(!layout) {\r\n        throw new Error(`Unrecognised layout name: ${name}`)\r\n    }\r\n    \r\n    const pieces = layout.board.map(row => row.map(makeCorePiece));\r\n\r\n    return {\r\n        copyablePiecesTop: layout.copyableTop.map(makeCorePiece),\r\n        boardLayout: new BoardLayout(pieces, layout.topLeftBlack),\r\n        copyablePiecesBottom: layout.copyableBottom.map(makeCorePiece),\r\n        layoutName: name,\r\n    };\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        let cpf = new CorePieceFactory();\r\n        this._corePieceFactory = cpf;\r\n\r\n        this.state = makeBoardState(defaultLayoutName, cpf);\r\n        this.state.numberRowsFromTop = false;\r\n\r\n        this.stateManager = new StateManager({\r\n            getState: () => this.state, \r\n            setState: state => this.setState(state) ,\r\n        });\r\n    }\r\n\r\n    doSetState(newState) {\r\n        this.stateManager.setState(newState);\r\n    }\r\n    \r\n    undo() { return this.stateManager.undo();}\r\n    redo() { return this.stateManager.redo();}\r\n    restart() { this.stateManager.restart();}\r\n\r\n    get canUndo() { return this.stateManager.canUndo;}\r\n    get canRedo() { return this.stateManager.canRedo;}\r\n\r\n    componentDidMount() {\r\n        document.title = 'Chess';\r\n    }\r\n\r\n    get numberRowsFromTop() {\r\n        return this.state.numberRowsFromTop;\r\n    }\r\n    boardLayout(layoutName) {\r\n\r\n        if(layoutName !== undefined) {\r\n            this.doSetState(makeBoardState(layoutName, this._corePieceFactory));\r\n        }\r\n        return this.state.layoutName;\r\n    }\r\n\r\n    clear() {\r\n        this.doSetState({\r\n            boardLayout: this.state.boardLayout.copy().clearSquares()\r\n        });\r\n    }\r\n\r\n    flip() {\r\n        this.doSetState({\r\n            boardLayout: this.state.boardLayout.copy().reserveRows(),\r\n            copyablePiecesTop: this.state.copyablePiecesBottom,\r\n            copyablePiecesBottom: this.state.copyablePiecesTop,\r\n            \r\n            numberRowsFromTop: !this.state.numberRowsFromTop,\r\n        });\r\n    }\r\n\r\n\r\n    _findOffBoardPiece(pieceId) {\r\n        let piece = this.state.copyablePiecesTop.find(p => p.id === pieceId);\r\n        if(!piece) {\r\n            piece = this.state.copyablePiecesBottom.find(p => p.id === pieceId);\r\n        }\r\n\r\n        return piece;\r\n    }\r\n\r\n    movePiece(pieceId, row, col)  {\r\n\r\n        let newBoardLayout = this.state.boardLayout.copy();\r\n        let doSetState = () => this.doSetState({boardLayout: newBoardLayout,});\r\n\r\n\r\n        const bp = newBoardLayout.findCorePiecebyId(pieceId);\r\n        if ( bp ) {\r\n            if (row !== bp.row || col !== bp.col) {\r\n                newBoardLayout.corePiece(row, col, bp.piece);\r\n                newBoardLayout.corePiece(bp.row, bp.col, null);\r\n                doSetState();\r\n            }\r\n        } else {\r\n            let obp = this._findOffBoardPiece(pieceId);\r\n\r\n            if (!obp) {\r\n                throw new Error(`Piece with id ${pieceId} not found`);\r\n            }\r\n\r\n            const copiedPiece = this._corePieceFactory.copy(obp); \r\n            newBoardLayout.corePiece(row,col, copiedPiece);\r\n            doSetState();\r\n        }\r\n    }\r\n\r\n    dragEnd(pieceId, dropped) {\r\n        if (!dropped) {\r\n            // The piece was dragged off the board. Now clear it.\r\n            const bp = this.state.boardLayout.findCorePiecebyId(pieceId);\r\n            if (bp) {\r\n                let newBoardLayout = this.state.boardLayout.copy();\r\n                newBoardLayout.corePiece(bp.row, bp.col, null);\r\n                \r\n                this.doSetState({\r\n                    boardLayout: newBoardLayout,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    dragBehaviour(pieceId) {\r\n        const onBoard = Boolean(this.state.boardLayout.findCorePiecebyId(pieceId));\r\n    \r\n        return {\r\n            move: onBoard,\r\n            copy: !onBoard,\r\n        };\r\n    }\r\n\r\n    renderMainGame() {\r\n        return (\r\n            <DndProvider backend={HTML5Backend}>\r\n                <div className=\"game\">\r\n\r\n                    <RowOfPieces\r\n                        corePieces={this.state.copyablePiecesTop}\r\n                        gameOptions={this}\r\n                    />\r\n\r\n                    <Board\r\n                        layout={this.state.boardLayout}\r\n                        gameOptions={this}\r\n                    />\r\n\r\n                    <RowOfPieces\r\n                        corePieces={this.state.copyablePiecesBottom}\r\n                        gameOptions={this}\r\n                    />\r\n                </div>\r\n            </DndProvider>\r\n        )\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n            {this.renderMainGame()}\r\n            <GameControl gameOptions={this}/>\r\n            </>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport { Game }\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Game } from './game';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './main.css';\r\n\r\nconst root = document.getElementById('root');\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Game />\r\n  </React.StrictMode>,\r\n  root\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}